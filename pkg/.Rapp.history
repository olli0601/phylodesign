pipeline.args['index.starttime.mode',][,v]
stopifnot( ph$edge.length[ which( ph$edge[, 1] == Ntip(ph)+1 ) ]>=29.5 )
tmp				<- seq.collapse.singles(ph)#
		tmp2			<- regmatches(tmp$tip.label[1], regexpr('ID_[0-9]+',tmp$tip.label[1]))#
		tmp2			<- as.numeric(substr(tmp2, 4, nchar(tmp2)))#
		tmp2			<- subset(node.stat, IDPOP==tmp2)[1, TIME_SEQ]#
		root.ctime		<- ifelse(Nnode(tmp), tmp2 - (node.depth.edgelength(tmp)[1] + tmp$root.edge), tmp2-tmp$root.edge)		#
		tmp				<- subset(node.stat, IDPOP<0)[, unique(IDPOP)]#
		stopifnot(length(tmp)==1)#
		stopifnot(subset(df.trms, IDTR==tmp)[, round(IDTR_TIME_INFECTED, d=1)]==round(root.ctime, d=1))
subset(df.trms, IDTR==tmp)[, round(IDTR_TIME_INFECTED, d=1)]
cat(paste('\ncreate sampler of evolutionary rates'))#
	#	create sampler of within host evolutionary rates#
	rER.pol			<- PANGEA.WithinHostEvolutionaryRate.create.sampler.v1(wher.mu=pipeline.args['wher.mu',][, as.numeric(v)], wher.sigma=pipeline.args['wher.sigma',][, as.numeric(v)])#
	#	create sampler of between host evolutionary rate dampener#
	tmp				<- PANGEA.TransmissionEdgeEvolutionaryRate.create.sampler(er.meanlog=pipeline.args['bwerm.mu',][, as.numeric(v)], er.sdlog=pipeline.args['bwerm.sigma',][, as.numeric(v)])#
	rERbw			<- tmp$rERbw#
	rERbw.args		<- tmp$rERbw.args#
	#	create sampler of ancestral sequences#
	cat(paste('\ncreate sampler of ancestral sequences'))#
	tmp				<- PANGEA.RootSeq.create.sampler(root.ctime.grace= 0.5, sample.grace= 3 )#
	rANCSEQ			<- tmp$rANCSEQ#
	rANCSEQ.args	<- tmp$rANCSEQ.args 	#
	#	read GTR parameters#
	log.df			<- PANGEA.GTR.params()#
	if(pipeline.args['dbg.rER',][, as.numeric(v)]==1 )#
	{#
		cat(paste('\nSetting mus to mean per gene and codon_pos'))#
		tmp		<- log.df[, list(mu= mean(mu)), by=c('GENE','CODON_POS')]#
		#tmp[, ER:=mu*log.df$meanRate[1]]#
		log.df	<- merge( subset(log.df, select=which(colnames(log.df)!='mu')), tmp, by=c('GENE','CODON_POS'))		#
	}		#
	if( pipeline.args['dbg.GTRparam',][, as.numeric(v)]==1 )#
	{#
		cat(paste('\nSetting GTR parameters to MEAN (except mu)'))#
		tmp		<- mean	#
		log.df	<- log.df[, list(state=state, mu=mu, alpha=tmp(alpha), at=tmp(at), ac=tmp(ac), cg=tmp(cg), ag=tmp(ag), gt=tmp(gt), meanRate=tmp(meanRate), a=tmp(a), c=tmp(c),  g=tmp(g), t=tmp(t) ), by=c('GENE','CODON_POS')]		#
	}		#
	log.df[, IDX:= seq_len(nrow(log.df))]#
	log.df[, FILE:=NULL]	#
	##
	##
	##
	file		<- paste(indir.epi, '/', infile.epi, sep='')#
	load(file)	#expect "df.epi"    "df.trms"   "df.inds"   "df.sample"#
	#	#
	infiles		<- list.files(indir.vts)#
	tmp			<- paste('^',infile.prefix,'.*nex$',sep='')#
	infiles		<- infiles[ grepl(tmp, infiles)  ]	#
	if(!length(infiles))	stop('cannot find files matching criteria')#
	##
	set.seed( pipeline.args['s.seed',][, as.numeric(v)] )#
	##
	#	read from VirusTreeSimulator and convert branch lengths in time to branch lengths in subst/site#
	##
	df.ph				<- vector('list', length(infiles))#
	df.nodestat			<- vector('list', length(infiles))#
	if( pipeline.args['index.starttime.mode',][,v]=='shift' )		#
		root.edge.rate	<- 1e-6#
	if( pipeline.args['index.starttime.mode',][,v]!='shift' )#
		root.edge.rate	<- log.df[1,meanRate]#
	cat(paste('\nUsing StartTimeMode',pipeline.args['index.starttime.mode',][,v],'\nSetting root edge rate to =',root.edge.rate))
indir.epi="/Users/Oliver/git/HPTN071sim/tmp140926-e110/TrChains"; infile.epi="180914_HPTN071_scA_rep1-e110_SAVE.R"; indir.vts="/Users/Oliver/git/HPTN071sim/tmp140926-e110/VirusTreeSimulator"; infile.prefix="180914_HPTN071_scA_rep1-e110_"; infile.args="/Users/Oliver/git/HPTN071sim/tmp140926-e110/180914_HPTN071_scA_rep1-e110_PipeArgs.R"; outdir.sg="/Users/Oliver/git/HPTN071sim/tmp140926-e110/SeqGen"
file		<- paste(indir.epi, '/', infile.epi, sep='')#
	load(file)	#expect "df.epi"    "df.trms"   "df.inds"   "df.sample"#
	#	#
	infiles		<- list.files(indir.vts)#
	tmp			<- paste('^',infile.prefix,'.*nex$',sep='')#
	infiles		<- infiles[ grepl(tmp, infiles)  ]	#
	if(!length(infiles))	stop('cannot find files matching criteria')#
	##
	set.seed( pipeline.args['s.seed',][, as.numeric(v)] )#
	##
	#	read from VirusTreeSimulator and convert branch lengths in time to branch lengths in subst/site#
	##
	df.ph				<- vector('list', length(infiles))#
	df.nodestat			<- vector('list', length(infiles))#
	if( pipeline.args['index.starttime.mode',][,v]=='shift' )		#
		root.edge.rate	<- 1e-6#
	if( pipeline.args['index.starttime.mode',][,v]!='shift' )#
		root.edge.rate	<- log.df[1,meanRate]#
	cat(paste('\nUsing StartTimeMode',pipeline.args['index.starttime.mode',][,v],'\nSetting root edge rate to =',root.edge.rate))
i<- 9		#
		infile			<- infiles[i]#
		cat(paste('\nprocess file',i,infile))#
		file			<- paste(indir.vts, '/', infile, sep='')#
		#	read brl, units from annotated nexus file. attention: () may not contain two nodes#
		tmp				<- hivc.beast2out.read.nexus.and.stats(file, method.node.stat='any.node')#
		ph				<- tmp$tree#
		node.stat		<- tmp$node.stat#
		node.stat		<- subset(node.stat, STAT=='Unit')#
		set(node.stat, NULL, 'VALUE', node.stat[, gsub('\"','',VALUE)])#
		node.stat[, IDPOP:= as.integer(node.stat[,substr(VALUE, 4, nchar(VALUE))])]#
		node.stat		<- merge(subset(df.inds, select=c(IDPOP, GENDER, DOB, TIME_SEQ, IDCLU)), subset(node.stat, select=c(IDPOP, NODE_ID)), by='IDPOP')	#
		##
		#	create collapsed Newick tree with expected substitutions / site for each branch #
		##
		#	draw within host evolutionary rates for every individual in the transmission chain, and	smaller ERs along the transmission lineages#
		node.stat		<- merge(node.stat, data.table( IDPOP=node.stat[, unique(IDPOP)], ER= rER.pol(node.stat[, length(unique(IDPOP))]), BWM= rERbw(node.stat[, length(unique(IDPOP))], rERbw.args) ), by='IDPOP')#
		#	re-set to previous notation in terms of BWM ( between host multiplier to ER, ie ER= within-host ER / BWM )#
		set(node.stat, NULL, 'BWM', node.stat[, ER/BWM])	#
		#	set BWM to 1 for all edges that are NOT leading to a transmission. #
		#	Because only one seq is sampled per patient, these are only edges that end in a tip.#
		set(node.stat, node.stat[, which( NODE_ID%in%seq.int(1,Ntip(ph)) )], 'BWM', 1.)#
		#	no ER possible for root node - there s no edge leading to it#
		set(node.stat, node.stat[, which(NODE_ID==Ntip(ph)+1)], c('ER','BWM'), NA_real_)		#
		#	set root edge evolutionary rate to overall mean between-host rate#
		#	get NODE_ID of edge from root#
		tmp				<- ph$edge[match(Ntip(ph)+1, ph$edge[1, ]), 2]#
		tmp				<- node.stat[, which(NODE_ID==tmp)]		#
		set(node.stat, tmp, 'ER', root.edge.rate )		#
		set(node.stat, tmp, 'BWM', 1. )		# no need to further slow down root edge#
		#	check root edge length#
		if( pipeline.args['index.starttime.mode',][,v]=='fix45' )#
		{#
			stopifnot( ph$edge.length[ which( ph$edge[, 1] == Ntip(ph)+1 ) ]>=29.5 )			#
		}#
		#	check calendar time of root in simulated phylogeny for consistency#
		tmp				<- seq.collapse.singles(ph)#
		tmp2			<- regmatches(tmp$tip.label[1], regexpr('ID_[0-9]+',tmp$tip.label[1]))#
		tmp2			<- as.numeric(substr(tmp2, 4, nchar(tmp2)))#
		tmp2			<- subset(node.stat, IDPOP==tmp2)[1, TIME_SEQ]#
		root.ctime		<- ifelse(Nnode(tmp), tmp2 - (node.depth.edgelength(tmp)[1] + tmp$root.edge), tmp2-tmp$root.edge)		#
		tmp				<- subset(node.stat, IDPOP<0)[, unique(IDPOP)]#
		stopifnot(length(tmp)==1)#
		stopifnot(subset(df.trms, IDTR==tmp)[, round(IDTR_TIME_INFECTED, d=1)]==round(root.ctime, d=1))#
		#	check if all sampling times are consistent with node height#
		tmp				<- subset( node.stat, NODE_ID<=Ntip(ph) )#
		setkey(tmp, NODE_ID)#
		tmp2			<- seq.collapse.singles(ph) #
		if( Nnode(tmp2) )#
			tmp[, NODE_DEPTH:=root.ctime + tmp2$root.edge + node.depth.edgelength(tmp2)[ seq_len(Ntip(tmp2)) ] ]#
		if( Nnode(tmp2)==0 )#
			tmp[, NODE_DEPTH:=root.ctime + tmp2$root.edge ]#
		stopifnot( tmp[, max(abs(NODE_DEPTH-TIME_SEQ))<=1e-6 ] )#
		#	set expected numbers of substitutions per branch within individual IDPOP#
		setkey(node.stat, NODE_ID)#
		ph$edge.length	<- ph$edge.length * node.stat[ ph$edge[, 2], ][, ER / BWM]#
		stopifnot(all(!is.na(ph$edge.length)))		#
		#	once expected number of substitutions / site are simulated, can collapse singleton nodes#
		ph				<- seq.collapse.singles(ph)	#
		if(pipeline.args['bwerm.sigma',][,v]==0 & pipeline.args['wher.sigma',][,v]==0)#
		{#
			cat(paste('\nChecking evolutionary rate consistency'))#
			set(tmp, NULL, 'NODE_DEPTH', tmp[, NODE_DEPTH-root.ctime])#
			set(tmp, NULL, 'NODE_DEPTH', tmp[, NODE_DEPTH]*node.stat[1, ER])#
			if( Nnode(ph) )#
				tmp[, NODE_DEPTH_ER:= ph$root.edge+node.depth.edgelength(ph)[ seq_len(Ntip(ph)) ] ]#
			if( Nnode(ph)==0 )#
				tmp[, NODE_DEPTH_ER:= ph$root.edge ]#
			stopifnot( tmp[, max(abs(NODE_DEPTH-NODE_DEPTH_ER))<=1e-6 ] )			#
		}
node.stat[, LABEL:= node.stat[, paste('IDPOP_',IDPOP,label.sep,GENDER,label.sep,'DOB_',round(DOB,d=3),label.sep,round(TIME_SEQ,d=3),sep='')]]
setkey(node.stat, NODE_ID)#
		ph$tip.label	<- node.stat[seq_len(Ntip(ph)), ][, LABEL]
write.tree(ph, digits = 10)
tmp	<- write.tree(ph, digits = 10)#
			substr(tmp,1,nchar(tmp)-1)
paste( '(',substr(tmp,1,nchar(tmp)-1),',NOEXIST_NA|NA|DOB_NA|',root.ctime,':0):0;', sep='')
s1
s1<- 'CGACTAACATGAAAAGAAATAATGGTAGCAAAACGTTGGCTGACCCGGTAAAATGAGCGGGGGTTTGCTGGGTAATAGTAACAAAAGACGAATCTAGCCCGTAGTCGATCAAAAAATGCTAGAACGAGATCTAGGTTGGTGTGAGCCAGAAGGTAGCCTATGTAACGAACCAGCCTCTAGTGCCCGATAGCCACCCGAGATAGAGACATGGATATGACATCGAAGACCTACCAGGAGCAGAGCCAGGGGTGTGGAAGACAGCGCGGTTGCTAGTAGGACACGCGCTATCATCGCTAACAAGATGAAAAGCAAGGACTAGGGCAAGAGAAGATGAACATACCACAGATGATTAGTTCGATACGTGTGAACCCGATTTCCGAGCAGGGGATTGGGGGAAGAAAGAGGTGAGAGACAGGACAGAAACAAGTCGACCGTCGTGTGGAAGAGTCTGTGAACGCCGAAGTGTGACAAGGTAAAGAGTCTTGCGCAGAGGAGCGGATGAAGAAAGCTCGGAGAGCGGCGATCAATAGAGAGTACCCAGGAGAGGATGATCCAGGGACGCGGTACGATCTGTACTGGAGACGGGCGGAGTAGGGGACGGAGCGAGTTACATGGATCGAGACAGAGAATAAGGGAGGTTTGGACCGTGACTACCACGGGGTAAAGTAAAAGCGAGCGGCCAAGGCAGGTACATAAAGGAGGTAGGGAAAGAAGAGACAAGTCACAAAACATCGTTAGAAGCATAGCGACCTAGGGGGGACGAAGAAGGCAAAGAAAAGTGACAGGGGTGGGACGGGT'
s<- as.DNAbin( rbind( strsplit(tolower(sa), '')[[1]], strsplit(tolower(s1), '')[[1]] ) )
sa
s1
nchar(s1)
nchar(sa)
s1<- 'CCAACTCCCCGTAAGGGCAAGGCTGAGGGGAGTGGAATCGATACAAAGGAGGTAAGACTGCACAGATGAAGAGAGTGGCACGAAAGAAATACCGTACATCAACAGAGCGATACGAGGCAGACTCTAGGAAAGTAGATGGAGAGGAAAAAGCGACTAACATGAAAAGAAATAATGGTAGCAAAACGTTGGCTGACCCGGTAAAATGAGCGGGGGTTTGCTGGGTAATAGTAACAAAAGACGAATCTAGCCCGTAGTCGATCAAAAAATGCTAGAACGAGATCTAGGTTGGTGTGAGCCAGAAGGTAGCCTATGTAACGAACCAGCCTCTAGTGCCCGATAGCCACCCGAGATAGAGACATGGATATGACATCGAAGACCTACCAGGAGCAGAGCCAGGGGTGTGGAAGACAGCGCGGTTGCTAGTAGGACACGCGCTATCATCGCTAACAAGATGAAAAGCAAGGACTAGGGCAAGAGAAGATGAACATACCACAGATGATTAGTTCGATACGTGTGAACCCGATTTCCGAGCAGGGGATTGGGGGAAGAAAGAGGTGAGAGACAGGACAGAAACAAGTCGACCGTCGTGTGGAAGAGTCTGTGAACGCCGAAGTGTGACAAGGTAAAGAGTCTTGCGCAGAGGAGCGGATGAAGAAAGCTCGGAGAGCGGCGATCAATAGAGAGTACCCAGGAGAGGATGATCCAGGGACGCGGTACGATCTGTACTGGAGACGGGCGGAGTAGGGGACGGAGCGAGTTACATGGATCGAGACAGAGAATAAGGGAGGTTTGGACCGTGACTACCACGGGGTAAAGTAAAAGCGAGCGGCCAAGGCAGGTACATAAAGGAGGTAGGGAAAGAAGAGACAAGTCACAAAACATCGTTAGAAGCATAGCGACCTAGGGGGGACGAAGAAGGCAAAGAAAAGTGACAGGGGTGGGACGGGT'
s<- as.DNAbin( rbind( strsplit(tolower(sa), '')[[1]], strsplit(tolower(s1), '')[[1]] ) )
s
dist.dna(s)
s1<- 'CCAACTCCCCGTAAGGGCAAGGCTAAGGGAAGTGGAATCGATACAGAGGAGGTAAGACTGCACAGATGAAAAGAGTGGCACGAAAGAAATACCGTACATCGACAGAGTGATACGAGGCAGACTCTAGAAAAGTAGATGGAGAGGAAAAAGCGGCTAACATGAAAAGAAATAATGGTAGCAAAACGTTGGCTGACCCGGTAATAAGAGCGGGGGCTTGCTGGGTACTTGTAACAAAAGACGAATCTAGCCCGTTGTCGATCAAAAAATGCTAGAACGAGATTTAGGTTGGTGTGAGCCAGAAGGTAGCCTATGTAACGAACCAGTCTCTAGTGCCCGATAGCCACCAGAGATAGAGACATGGATATGACATCGAGGGCCTCCCAGGAGCAGAGCCCGGGGTGCGGAAGACAGCGCGGTTGCTAGTAAGACACGCGCTATCAACGCTAACAAGATAAAAAGCAAGGACTAGGGCAAGAGAAGATGAACATAACACAGGTGGTTAGTTCGATACGTGTGAACCCGTTTTCCGAGCAGGGGATTGGGGGAAGAAAGAGGTGAGAGACAGGACAGAAACAAGTCGACCGTCGTGTGGAAGAGTCTGTGAACGCCGAAGTGTGACAAGGTAAAGAGTCTTGCGCAGAGGAGCGGATGAAGAAAGCTCGGAGAGCGGCGACCAATAAAGAGTACCCAGGAGAGGATGATCCAGGGACGCGGTACGATCTGTACTGGAGACGGGCGGAGTAGGGGACGGAGCGAGTTACATGGATCGATACAGAGAATAAGGGAGGTTTGGACCGTGACTACCACGGGGTAAAGTAAAAGCGGGCGGCCAAGGCAGGTACATAAAGGAGGTAGGGAAAGAACAGACAAGTCACAAAACATCGTTAGAAGCATAGCGACCTAGGGGGGACGAAGAAGGCACAGAAAAGTGACAGGGGCGGGGCGGGT'
s<- as.DNAbin( rbind( strsplit(tolower(sa), '')[[1]], strsplit(tolower(s1), '')[[1]] ) )
dist.dna(s)
library(rPANGEAHIVsim)
indir			<- system.file(package="rPANGEAHIVsim", "misc")#
		infile.ind		<- '180914_HPTN071_scA_rep1'#
		infile.trm		<- '180914_HPTN071_scA_rep1'					#
		pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42,#
														s.INC.recent=0.1, s.INC.recent.len=5, s.PREV.min=0.01, s.PREV.max=0.1, #
														epi.model='HPTN071', epi.dt=1/48, epi.import=NA,#
														v.N0tau=1, v.r=2.851904, v.T50=-2,#
														wher.mu=log(0.00447743)-0.3^2/2, wher.sigma=0.3, bwerm.mu=log(0.002239075)-0.13^2/2, bwerm.sigma=0.13, er.gamma=4,#
														dbg.GTRparam=1, dbg.rER=1, index.starttime.mode='normal', startseq.mode='sample')						#
		# standard run, fixed GTR param + fixed relative rates for each transmission chain#
		# no WH Er to equal BH ER, and both being constant#
		pipeline.vary	<- data.table(	epi.import=c(0, 0.05, 0.1), label=c('-n110','-n115','-n111'))
dummy			<- pipeline.vary[, {				#
					set(pipeline.args, which( pipeline.args$stat=='epi.import' ), 'v', as.character(epi.import))					#
					print(pipeline.args)#
					#	re-name the following:#
					tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp140926'#
					tmpdir			<- paste(tmpdir,label,sep='')#
					dir.create(tmpdir, showWarnings=FALSE)						#
					#						#
					file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))#
					file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,label,'_TRM.csv',sep=''))#
					file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,label,'_IND.csv',sep=''), paste(infile.trm,label,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
					system(file)#
				}, by='label']
library(rPANGEAHIVsim)
indir			<- system.file(package="rPANGEAHIVsim", "misc")#
		infile.ind		<- '180914_HPTN071_scA_rep1'#
		infile.trm		<- '180914_HPTN071_scA_rep1'					#
		pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42,#
														s.INC.recent=0.1, s.INC.recent.len=5, s.PREV.min=0.01, s.PREV.max=0.1, #
														epi.model='HPTN071', epi.dt=1/48, epi.import=NA,#
														v.N0tau=1, v.r=2.851904, v.T50=-2,#
														wher.mu=log(0.00447743)-0.3^2/2, wher.sigma=0.3, bwerm.mu=log(0.002239075)-0.13^2/2, bwerm.sigma=0.13, er.gamma=4,#
														dbg.GTRparam=1, dbg.rER=1, index.starttime.mode='normal', startseq.mode='sample')						#
		# standard run, fixed GTR param + fixed relative rates for each transmission chain#
		# no WH Er to equal BH ER, and both being constant#
		pipeline.vary	<- data.table(	epi.import=c(0, 0.05, 0.1), label=c('-n110','-n115','-n111'))						#
		dummy			<- pipeline.vary[, {				#
					set(pipeline.args, which( pipeline.args$stat=='epi.import' ), 'v', as.character(epi.import))					#
					print(pipeline.args)#
					#	re-name the following:#
					tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp140926'#
					tmpdir			<- paste(tmpdir,label,sep='')#
					dir.create(tmpdir, showWarnings=FALSE)						#
					#						#
					file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))#
					file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,label,'_TRM.csv',sep=''))#
					file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,label,'_IND.csv',sep=''), paste(infile.trm,label,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
					system(file)#
				}, by='label']
load('~/git/HPTN071sim/tmp140926-n111/180914_HPTN071_scA_rep1-n111_INTERNAL/180914_HPTN071_scA_rep1-n111_SIMULATED_INTERNAL.R')
subset(df.trms, IDTR=='11371')
subset(df.trms, IDCLU=='247')
indir.epi="/Users/Oliver/git/HPTN071sim/tmp140926-n110/TrChains"; infile.epi="180914_HPTN071_scA_rep1-n110_SAVE.R"; indir.sg="/Users/Oliver/git/HPTN071sim/tmp140926-n110/SeqGen"; infile.sg="180914_HPTN071_scA_rep1-n110_"; infile.args="/Users/Oliver/git/HPTN071sim/tmp140926-n110/180914_HPTN071_scA_rep1-n110_PipeArgs.R"; outdir="/Users/Oliver/git/HPTN071sim/tmp140926-n110"
with.plot			<- 1	#
	verbose				<- 1#
	label.idx.codonpos	<- 1#
	label.idx.gene		<- 2#
	label.idx.clu		<- 3#
	treelabel.idx.idpop	<- 1#
	treelabel.idx.sep	<- '|'
if(verbose)#
	{#
		cat('\ninput args\n',paste(indir.sg, infile.prefix, sep='\n'))#
	}#
	if(!is.na(infile.args))#
	{#
		load(infile.args)	#expect 'pipeline.args'#
	}#
	if(is.null(pipeline.args))#
	{#
		cat('\nCould not find pipeline.args, generating default')#
		pipeline.args	<- rPANGEAHIVsim.pipeline.args()#
	}	#
	##
	file		<- paste(indir.epi, '/', infile.epi, sep='')#
	load(file)	#expect "df.epi"    "df.trms"   "df.inds"   "df.sample"#
	##
	file			<- paste(indir.sg,'/',infile.prefix, 'seqgen.R',sep='')#
	cat(paste('\nLoad seqgen R input file, file=',file))#
	load(file)	#expect df.seqgen, gtr.central, log.df, df.nodestat#
	##
	if( pipeline.args['index.starttime.mode',][,v]=='shift' )		#
		root.edge.rate	<- 1e-6#
	if( pipeline.args['index.starttime.mode',][,v]!='shift' )#
		root.edge.rate	<- log.df[1,meanRate]		#
	stopifnot( all( c('s.seed')%in%pipeline.args[, stat] ) )	#
	set.seed(pipeline.args['s.seed',][, as.numeric(v)])
indir.epi="/Users/Oliver/git/HPTN071sim/tmp140926-n110/TrChains"; infile.epi="180914_HPTN071_scA_rep1-n110_SAVE.R"; indir.sg="/Users/Oliver/git/HPTN071sim/tmp140926-n110/SeqGen"; infile.prefix="180914_HPTN071_scA_rep1-n110_"; infile.args="/Users/Oliver/git/HPTN071sim/tmp140926-n110/180914_HPTN071_scA_rep1-n110_PipeArgs.R"; outdir="/Users/Oliver/git/HPTN071sim/tmp140926-n110"
if(verbose)#
	{#
		cat('\ninput args\n',paste(indir.sg, infile.prefix, sep='\n'))#
	}#
	if(!is.na(infile.args))#
	{#
		load(infile.args)	#expect 'pipeline.args'#
	}#
	if(is.null(pipeline.args))#
	{#
		cat('\nCould not find pipeline.args, generating default')#
		pipeline.args	<- rPANGEAHIVsim.pipeline.args()#
	}	#
	##
	file		<- paste(indir.epi, '/', infile.epi, sep='')#
	load(file)	#expect "df.epi"    "df.trms"   "df.inds"   "df.sample"#
	##
	file			<- paste(indir.sg,'/',infile.prefix, 'seqgen.R',sep='')#
	cat(paste('\nLoad seqgen R input file, file=',file))#
	load(file)	#expect df.seqgen, gtr.central, log.df, df.nodestat#
	##
	if( pipeline.args['index.starttime.mode',][,v]=='shift' )		#
		root.edge.rate	<- 1e-6#
	if( pipeline.args['index.starttime.mode',][,v]!='shift' )#
		root.edge.rate	<- log.df[1,meanRate]		#
	stopifnot( all( c('s.seed')%in%pipeline.args[, stat] ) )	#
	set.seed(pipeline.args['s.seed',][, as.numeric(v)])
df.ph.out	<- df.seqgen[,	{#
									#print( table( strsplit(ANCSEQ, ''), useNA='if') )#
									file	<- paste(indir.sg,'/',infile.prefix, IDCLU, '_', GENE, '_', CODON_POS,'.seqgen',sep='')#
									cat(paste('\nwrite to file',file))#
									txt		<- paste('1\t',nchar(ANCSEQ),'\n',sep='')#
									txt		<- paste(txt, 'ANCSEQ\t',toupper(ANCSEQ),'\n',sep='')					#
									txt		<- paste(txt, '1\n',sep='')#
									txt		<- paste(txt, NEWICK, '\n',sep='')#
									cat(txt, file=file)#
									list(FILE= paste(infile.prefix, IDCLU, '_', GENE, '_', CODON_POS,'.seqgen',sep='') )#
									# ./seq-gen -mHKY -t3.0 -f0.3,0.2,0.2,0.3 -n1 -k1 -on < /Users/Oliver/git/HPTN071sim/tmp/SeqGen/140716_RUN001_50.seqgen > example.nex#
								}, by=c('GENE','CODON_POS','IDCLU')]#
	df.ph.out	<- df.ph.out[, 	{#
									tmp	<- log.df[['IDX']][ which( log.df[['GENE']]==GENE & log.df[['CODON_POS']]==CODON_POS ) ]#
									stopifnot(length(tmp)>1)#
									list( FILE=FILE, IDCLU=IDCLU, IDX=sample(tmp, length(FILE), replace=FALSE) )#
								}, by=c('GENE','CODON_POS')]#
	#	sample GTR parameters from posterior#
	df.ph.out	<- merge(df.ph.out, log.df, by=c('GENE', 'CODON_POS', 'IDX'))#
	##
	if(with.plot)#
	{#
		tmp			<- subset(df.nodestat, ER!=root.edge.rate, select=c(IDPOP, ER, BWM, IDCLU))#
		tmp			<- merge(tmp, subset(df.ph.out, select=c(GENE, CODON_POS, IDCLU, mu)), by='IDCLU', allow.cartesian=TRUE)#
		set(tmp, NULL, 'ER', tmp[, ER*mu])		#
		ggplot(tmp, aes(x=CODON_POS, y=ER, colour=CODON_POS, group=CODON_POS)) + geom_boxplot() +				#
				facet_grid(.~GENE, scales='free_y') +#
				scale_colour_discrete(guide=FALSE) +#
				scale_y_continuous(breaks= seq(0, 0.05, 0.002)) + labs(linetype='Gene', y='simulated within-host evolutionary rate', x='codon position')#
		file		<- paste(indir.sg,'/',infile.prefix, 'ER_by_gene.pdf',sep='')#
		ggsave(file=file, w=6, h=6)						#
	}	#
	##
	#	call SeqGen command line#
	##
	cat(paste('\nUsing Gamma rate variation, gamma=',pipeline.args['er.gamma',][, as.numeric(v)]))#
	tmp		<- df.ph.out[, {	#
				cat(paste('\nProcess', IDCLU, GENE, CODON_POS))				#
				cmd	<- cmd.SeqGen(indir.sg, FILE, indir.sg, gsub('seqgen','phy',FILE), prog=PR.SEQGEN, prog.args=paste('-n',1,' -k1 -or -z',pipeline.args['s.seed',][, as.numeric(v)],sep=''), #
						alpha=alpha, gamma=pipeline.args['er.gamma',][, as.numeric(v)], invariable=0, scale=mu, freq.A=a, freq.C=c, freq.G=g, freq.T=t,#
						rate.AC=ac, rate.AG=ag, rate.AT=at, rate.CG=cg, rate.CT=1, rate.GT=gt)#
				system(cmd)				#
				list(CMD=cmd)							#
			}, by='FILE']
PR.PACKAGE					<- "rPANGEAHIVsim"#
PR.STARTME					<- system.file(package=PR.PACKAGE, "misc", "rPANGEAHIV.startme.R")#
PR.HPTN071.INPUT.PARSER1	<- paste(PR.STARTME,"-exe=HPTN071.INPUT.PARSER1",sep=' ')#
PR.HPTN071.INPUT.PARSER2	<- paste(PR.STARTME,"-exe=HPTN071.INPUT.PARSER2",sep=' ')#
PR.DSPS.INPUT.PARSER2		<- paste(PR.STARTME,"-exe=DSPS.INPUT.PARSER2",sep=' ')#
PR.SEQGEN.FILECREATOR		<- paste(PR.STARTME,"-exe=PR.SEQGEN.FILECREATOR",sep=' ')#
PR.SEQGEN.SIMULATOR			<- paste(PR.STARTME,"-exe=PR.SEQGEN.SIMULATOR",sep=' ')#
PR.VIRUSTREESIMULATOR		<- system.file(package=PR.PACKAGE, "ext", "VirusTreeSimulator.jar")#
PR.SEQGEN					<- system.file(package=PR.PACKAGE, "ext", "seq-gen")#
#
HPC.MPIRUN					<- {tmp<- c("mpirun","mpiexec"); names(tmp)<- c("debug","cx1.hpc.ic.ac.uk"); tmp}#
HPC.CX1.IMPERIAL			<- "cx1.hpc.ic.ac.uk"		#this is set to system('domainname',intern=T) for the hpc cluster of choice#
HPC.MEM						<- "1750mb"#
HPC.CX1.IMPERIAL.LOAD		<- "module load intel-suite mpi R/2.15"
cmd.SeqGen<- function(indir, infile, outdir, outfile, prog=PR.SEQGEN, prog.args='-n1 -k1 -on -z42', alpha=1, gamma=4, invariable=0, scale=1, #
						freq.A=0.25, freq.C=0.25, freq.G=0.25, freq.T=0.25,#
						rate.AC=1, rate.AG=1, rate.AT=1, rate.CG=1, rate.CT=1, rate.GT=1)#
{#
	cmd<- "########################################################
# start: run SeqGen#
#######################################################"#
	cmd		<- paste(cmd, paste("\necho \'run ",prog,"\'\n",sep=''))#
	cmd		<- paste(cmd, paste(prog,' ',prog.args,' ',sep=''),sep='')#
	#	add substitution model#
	#cmd		<- paste(cmd, paste("-mHKY -t3.0 -f0.3,0.2,0.2,0.3",sep=''),sep='')#
	tmp		<- ifelse(!is.na(gamma) & gamma>0, paste(' -g',gamma,' -a',alpha,' -i',invariable,sep=''),'')#
	cmd		<- paste(cmd, paste('-mGTR',tmp,' -s', scale,#
									' -f',freq.A,',',freq.C,',',freq.G,',',freq.T,#
									' -r',rate.AC, ',', rate.AG, ',', rate.AT, ',', rate.CG, ',', rate.CT, ',', rate.GT, sep=''),sep='')#
	#	add I/O#
	cmd		<- paste(cmd, paste(' < ', indir,'/',infile,' > ', outdir,'/',outfile, '\n', sep=''))#
	#cmd		<- paste(cmd, 'rm ',indir,'/',infile,'\n', sep='')#
	cmd		<- paste(cmd,paste("echo \'end ",prog,"\'\n",sep=''))#
	cmd		<- paste(cmd,"########################################################
# end: run SeqGen#
#######################################################\n",sep='')#
	cmd#
}
cat(paste('\nUsing Gamma rate variation, gamma=',pipeline.args['er.gamma',][, as.numeric(v)]))#
	tmp		<- df.ph.out[, {	#
				cat(paste('\nProcess', IDCLU, GENE, CODON_POS))				#
				cmd	<- cmd.SeqGen(indir.sg, FILE, indir.sg, gsub('seqgen','phy',FILE), prog=PR.SEQGEN, prog.args=paste('-n',1,' -k1 -or -z',pipeline.args['s.seed',][, as.numeric(v)],sep=''), #
						alpha=alpha, gamma=pipeline.args['er.gamma',][, as.numeric(v)], invariable=0, scale=mu, freq.A=a, freq.C=c, freq.G=g, freq.T=t,#
						rate.AC=ac, rate.AG=ag, rate.AT=at, rate.CG=cg, rate.CT=1, rate.GT=gt)#
				system(cmd)				#
				list(CMD=cmd)							#
			}, by='FILE']
infiles		<- list.files(indir.sg)#
	infiles		<- infiles[ grepl('*phy$', infiles)  ]	#
	if(!length(infiles))	stop('cannot find files matching criteria')		#
	infile.df	<- data.table(FILE=infiles)#
	tmp			<- infile.df[, strsplit(FILE, '_') ]#
	infile.df[, CODON_POS:= sapply(tmp, function(x) rev(x)[label.idx.codonpos])]#
	infile.df[, GENE:= sapply(tmp, function(x) rev(x)[label.idx.gene])]#
	infile.df[, IDCLU:= sapply(tmp, function(x) rev(x)[label.idx.clu])]#
	set(infile.df, NULL, 'CODON_POS', infile.df[, substr(CODON_POS,1,3)])#
	cat(paste('\nFound sequences for clusters, nclu=', infile.df[, length(unique(IDCLU))]))#
	##
	#	read simulated sequences#
	##
	df.seq		<- infile.df[,	{#
				cat(paste('\nread seq in file',FILE))#
				file	<- paste(indir.sg,'/',FILE,sep='')#
				tmp		<- as.character(read.dna(file, format='sequential'))#
				list( SEQ=apply(tmp,1,function(x) paste(x, collapse='')), LABEL=rownames(tmp) )				#
			}, by='FILE']#
	df.seq		<- merge(df.seq, infile.df, by='FILE')#
	##
	#	reconstruct genes from codon positions#
	##
	df.seq[, STAT:=paste(GENE,CODON_POS,sep='.')]		#
	df.seq		<- dcast.data.table(df.seq, IDCLU + LABEL ~ STAT, value.var="SEQ")#
	#	check that seq of correct size#
	stopifnot( df.seq[, all( nchar(GAG.CP1)==nchar(GAG.CP2) & nchar(GAG.CP1)==nchar(GAG.CP3) )] )#
	stopifnot( df.seq[, all( nchar(POL.CP1)==nchar(POL.CP2) & nchar(POL.CP1)==nchar(POL.CP3) )] )#
	stopifnot( df.seq[, all( nchar(ENV.CP1)==nchar(ENV.CP2) & nchar(ENV.CP1)==nchar(ENV.CP3) )] )#
	##
	df.seq		<- df.seq[, {#
				tmp		<- do.call('rbind',sapply(list(ENV.CP1,ENV.CP2,ENV.CP3), strsplit, ''))#
				env		<- paste(as.vector(tmp), collapse='')#
				tmp		<- do.call('rbind',sapply(list(GAG.CP1,GAG.CP2,GAG.CP3), strsplit, ''))#
				gag		<- paste(as.vector(tmp), collapse='')#
				tmp		<- do.call('rbind',sapply(list(POL.CP1,POL.CP2,POL.CP3), strsplit, ''))#
				pol		<- paste(as.vector(tmp), collapse='')#
				list(GAG=gag, POL=pol, ENV=env, IDCLU=IDCLU)#
			}, by=c('LABEL')]#
	#	check that we have indeed seq for all sampled individuals#
	df.seq		<- subset( df.seq, !grepl('NOEXIST',LABEL) )	#
	tmp			<- df.seq[, sapply( strsplit(LABEL, treelabel.idx.sep, fixed=TRUE), '[[', treelabel.idx.idpop )]#
	df.seq[, IDPOP:=as.integer(substr(tmp,7,nchar(tmp)))]	#
	stopifnot( setequal( subset( df.inds, !is.na(TIME_SEQ) )[, IDPOP], df.seq[,IDPOP]) )
file			<- paste(outdir, '/', infile.prefix, 'SIMULATED_INTERNAL.R', sep='')#
	cat(paste('\nwrite to file', file))#
	save(df.epi, df.trms, df.inds, df.sample, df.seq, file=file)#
	##
	#	save simulated data -- to be shared#
	#	#
	if(pipeline.args['epi.model'][,v]=='HPTN071')#
		tmp			<- subset( df.inds, !is.na(TIME_SEQ), select=c(IDPOP, GENDER, CIRCM, DOB, DOD, TIME_SEQ ) )#
	if(pipeline.args['epi.model'][,v]=='DSPS')#
		tmp			<- subset( df.inds, !is.na(TIME_SEQ), select=c(IDPOP, GENDER, TIME_SEQ ) )#
	file			<- paste(outdir, '/', infile.prefix, 'SIMULATED_metadata.csv', sep='')#
	cat(paste('\nwrite to file', file))#
	write.csv(tmp, file)		#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, GAG],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.gag		<- as.DNAbin(tmp)#
	file			<- paste(outdir, '/', infile.prefix, 'SIMULATED_gag.fa', sep='')#
	write.dna(df.seq.gag, file, format = "fasta")	#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, POL],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.pol		<- as.DNAbin(tmp)#
	file			<- paste(outdir, '/', infile.prefix, 'SIMULATED_pol.fa', sep='')#
	write.dna(df.seq.pol, file, format = "fasta")	#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, ENV],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.env		<- as.DNAbin(tmp)#
	file			<- paste(outdir, '/', infile.prefix, 'SIMULATED_env.fa', sep='')#
	write.dna(df.seq.env, file, format = "fasta")
df.seq.gag
df.seq.env
str(df.seq)
file			<- system.file(package="rPANGEAHIVsim", "misc",'PANGEA_SSAfg_HXB2outgroup.R')#
		cat(paste('\nLoading outgroup seq from file', file))#
		load(file)		#expect "outgroup.seq.gag" "outgroup.seq.pol" "outgroup.seq.env"#
		#	concatenate sequences#
		seq				<- cbind(df.seq.gag,df.seq.pol,df.seq.env)
seq
rownames(seq)	<- df.seq[, paste(IDCLU,treelabel.idx.sep,LABEL,sep='')]
df.seq.env
df.seq.gag
df.seq.pol
seq				<- cbind(df.seq.gag,df.seq.pol,df.seq.env)
seq
cbind(df.seq.gag,df.seq.pol)
which( grepl('1007', rownames(df.seq.gag)) )
ncol(df.seq.gag)
seq
seq[1,1:1440]
all(as.character(seq[1,1:1440])==as.character(df.seq.gag[165,]))
tmp				<- tolower(do.call('rbind',strsplit(df.seq[, paste(GAG,POL,ENV,sep='')],'')))#
		rownames(tmp)	<- df.seq[, paste(IDCLU,treelabel.idx.sep,LABEL,sep='')]	#
		seq				<- as.DNAbin(tmp)
seq
tmp				<- cbind(outgroup.seq.gag[,1:ncol(df.seq.gag)], outgroup.seq.pol, outgroup.seq.env)#
		seq				<- rbind(seq,tmp)
seq.ph			<- nj(dist.dna(seq))		#
		tmp				<- which(seq.ph$tip.label=="HXB2")#
		seq.ph			<- reroot(seq.ph, tmp, seq.ph$edge.length[which(seq.ph$edge[,2]==tmp)])#
		seq.ph			<- ladderize(seq.ph)#
		#	plot#
		file			<- paste(indir.sg, '/', infile.prefix, 'INFO_NJconc.pdf', sep='')				#
		pdf(file=file, w=10, h=80)#
		plot(seq.ph, show.tip=TRUE, cex=0.5)#
		dev.off()
file
seq.ph
require(devtools)
install_github("hadley/ggplot2")
require(Rcpp)
f<- '/Users/Oliver/git/pkg.R'
load(f)
pkgs
installed <- pkgs %in% installed.packages()[, 'Package']
installed
if (length(pkgs[!installed]) >=1){#
  install.packages(pkgs[!installed])#
}
require(ggplot2)
ggplot(mtcars, aes(x=mpg)) + geom_density()
require(abc.star)
.libPaths
.libPaths()
require(abc.star)
library(help=abc.star)
?nabc.mutost.onesample
tau.u<- 0.5; tau.l<- -tau.u; alpha<- 0.01; xn<- yn<- 60; xmu<- ymu<- 0.5; xsigma2<- ysigma2<- 2#
	args<- paste("mutost",1,tau.u,alpha,sep='/')#
	x<- rnorm(xn,xmu,sd=sqrt(xsigma2))#
	y<- rnorm(yn,ymu,sd=sqrt(ysigma2))#
	nabc.mutost.onesample(y, x, args= args, verbose= 0)
library(abc.star)
library(help=abc.star)
CODE.HOME	<<- "/Users/Oliver/git/abc.star"
require(roxygen2)
roxygenize(CODE.HOME)
detach(package:abc.star)
library(abc.star)
library(help=abc.star)
?chisqstretch.calibrate
n.of.x		<- 60#
x			<- rnorm(n.of.x,0,1)#
s.of.x		<- sd(x)#
abc.param	<- chisqstretch.calibrate(n.of.x, s.of.x, scale=n.of.x, n.of.y=n.of.x, mx.pw=0.9, alpha=0.01, max.it=100, debug=FALSE, plot=TRUE)
?dyn.load
getLoadedDLLs()
require(abc.star)
n.of.x		<- 60#
x			<- rnorm(n.of.x,0,1)#
s.of.x		<- sd(x)#
abc.param	<- chisqstretch.calibrate(n.of.x, s.of.x, scale=n.of.x, n.of.y=n.of.x, mx.pw=0.9, alpha=0.01, max.it=100, debug=FALSE, plot=TRUE)
library(abc.star)
?library.dynam
library.dynam()
library.dynam('abc.star','abc.star','/Library/Frameworks/R.framework/Versions/3.1/Resources/library')
library.dynam('abc.star','abc.star','/Users/Oliver/Library/R/3.1/library')
n.of.x		<- 60#
x			<- rnorm(n.of.x,0,1)#
s.of.x		<- sd(x)#
abc.param	<- chisqstretch.calibrate(n.of.x, s.of.x, scale=n.of.x, n.of.y=n.of.x, mx.pw=0.9, alpha=0.01, max.it=100, debug=FALSE, plot=TRUE)
is.loaded("abcScaledChiSq")
CODE.HOME	<<- "/Users/Oliver/git/abc.star"
require(roxygen2)
roxygenize(CODE.HOME)
require(rPANGEAHIVsim)
indir			<- system.file(package="rPANGEAHIVsim", "misc")#
		pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42,#
														s.INC.recent=0.1, s.INC.recent.len=5, s.PREV.min=0.01, s.PREV.max=0, #
														epi.model='HPTN071', epi.dt=1/48, epi.import=0.05,#
														v.N0tau=1, v.r=2.851904, v.T50=-2,#
														wher.mu=log(0.00447743)-0.3^2/2, wher.sigma=0.3, bwerm.mu=log(0.002239075)-0.13^2/2, bwerm.sigma=0.13, er.gamma=NA,#
														dbg.GTRparam=0, dbg.rER=0, index.starttime.mode='normal', startseq.mode='sample', seqtime.mode=NA)						#
		# standard run, fixed GTR param + fixed relative rates for each transmission chain#
		# no WH Er to equal BH ER, and both being constant#
		pipeline.vary	<- data.table(	seqtime.mode=c('Gamma9','Gamma3','Unif12'),				#
										label=c('-n0005g9','-n0005g3','-n0005u'))						#
		dummy			<- pipeline.vary[, {				#
					set(pipeline.args, which( pipeline.args$stat=='seqtime.mode' ), 'v', as.character(seqtime.mode))#
					print(pipeline.args)#
					#	scenario A		#
					infile.ind		<- '211014_RUN123_SCENARIO_0'#
					infile.trm		<- '211014_RUN123_SCENARIO_0'#
					tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141024'#
					tmpdir			<- paste(tmpdir,label,sep='')#
					dir.create(tmpdir, showWarnings=FALSE)																		#
					set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.11')#
					file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))#
					file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,label,'_TRM.csv',sep=''))#
					file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,label,'_IND.csv',sep=''), paste(infile.trm,label,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
					system(file)					#
				}, by='label']
library(rPANGEAHIVsim)
indir			<- system.file(package="rPANGEAHIVsim", "misc")#
		pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42,#
														s.INC.recent=0.1, s.INC.recent.len=5, s.PREV.min=0.01, s.PREV.max=0, #
														epi.model='HPTN071', epi.dt=1/48, epi.import=0.05,#
														v.N0tau=1, v.r=2.851904, v.T50=-2,#
														wher.mu=log(0.00447743)-0.3^2/2, wher.sigma=0.3, bwerm.mu=log(0.002239075)-0.13^2/2, bwerm.sigma=0.13, er.gamma=NA,#
														dbg.GTRparam=0, dbg.rER=0, index.starttime.mode='normal', startseq.mode='sample', seqtime.mode=NA)						#
		# standard run, fixed GTR param + fixed relative rates for each transmission chain#
		# no WH Er to equal BH ER, and both being constant#
		pipeline.vary	<- data.table(	seqtime.mode=c('Gamma9','Gamma3','Unif12'),				#
										label=c('-n0005g9','-n0005g3','-n0005u'))
dummy			<- pipeline.vary[, {				#
					set(pipeline.args, which( pipeline.args$stat=='seqtime.mode' ), 'v', as.character(seqtime.mode))#
					print(pipeline.args)#
					#	scenario A		#
					infile.ind		<- '211014_RUN123_SCENARIO_0'#
					infile.trm		<- '211014_RUN123_SCENARIO_0'#
					tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141024'#
					tmpdir			<- paste(tmpdir,label,sep='')#
					dir.create(tmpdir, showWarnings=FALSE)																		#
					set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.11')#
					file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))#
					file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,label,'_TRM.csv',sep=''))#
					file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,label,'_IND.csv',sep=''), paste(infile.trm,label,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
					system(file)					#
				}, by='label']
library(rPANGEAHIVsim)
if(1)#
	{#
		indir			<- system.file(package="rPANGEAHIVsim", "misc")#
		pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42,#
														s.INC.recent=0.1, s.INC.recent.len=5, s.PREV.min=0.01, s.PREV.max=0, #
														epi.model='HPTN071', epi.dt=1/48, epi.import=0.05,#
														v.N0tau=1, v.r=2.851904, v.T50=-2,#
														wher.mu=log(0.00447743)-0.3^2/2, wher.sigma=0.3, bwerm.mu=log(0.002239075)-0.13^2/2, bwerm.sigma=0.13, er.gamma=NA,#
														dbg.GTRparam=0, dbg.rER=0, index.starttime.mode='normal', startseq.mode='sample', seqtime.mode=NA)						#
		# standard run, fixed GTR param + fixed relative rates for each transmission chain#
		# no WH Er to equal BH ER, and both being constant#
		pipeline.vary	<- data.table(	seqtime.mode=c('Gamma9','Gamma3','Unif12'),				#
										label=c('-n0005g9','-n0005g3','-n0005u'))						#
		dummy			<- pipeline.vary[, {				#
					set(pipeline.args, which( pipeline.args$stat=='seqtime.mode' ), 'v', as.character(seqtime.mode))#
					print(pipeline.args)#
					#	scenario A		#
					infile.ind		<- '211014_RUN123_SCENARIO_0'#
					infile.trm		<- '211014_RUN123_SCENARIO_0'#
					tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141024'#
					tmpdir			<- paste(tmpdir,label,sep='')#
					dir.create(tmpdir, showWarnings=FALSE)																		#
					set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.11')#
					file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))#
					file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,label,'_TRM.csv',sep=''))#
					file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,label,'_IND.csv',sep=''), paste(infile.trm,label,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
					system(file)					#
				}, by='label']#
	}
require(rPANGEAHIVsim)
indir			<- '/Users/Oliver/duke/2014_Gates/methods_comparison_pipeline/Pangea_Oct28_2014_sim'#
		pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42,#
				s.INC.recent=0.1, s.INC.recent.len=5, s.PREV.min=0.01, s.PREV.max=0, #
				epi.model='HPTN071', epi.dt=1/48, epi.import=0.05,#
				v.N0tau=1, v.r=2.851904, v.T50=-2,#
				wher.mu=log(0.003358613)-0.3^2/2, wher.sigma=0.3, bwerm.mu=log(0.002239075)-0.13^2/2, bwerm.sigma=0.13, er.gamma=0,#
				dbg.GTRparam=0, dbg.rER=0, index.starttime.mode='normal', startseq.mode='sample', seqtime.mode='Unif12')						#
		pipeline.vary	<- data.table(	REP=1:100, label=paste('-r',1:100,sep='')  )
dummy			<- pipeline.vary[, {									#
					if(1)#
					{#
						#	scenario A					#
						infile.ind		<- paste('281014_HPTN071_scA_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scA_rep',REP,sep='')#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141025a'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																		#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.11')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)	#
						stop()#
					}#
					if(1)#
					{#
						#	scenario B						#
						infile.ind		<- paste('281014_HPTN071_scB_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scB_rep',REP,sep='')#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141025b'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																														#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.15')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)						#
					}#
					if(1)#
					{#
						#	scenario C						#
						infile.ind		<- paste('281014_HPTN071_scC_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scC_rep',REP,sep='')	#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141025c'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																														#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.185')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)	#
					}					#
				}, by='label']
pipeline.vary	<- data.table(	REP=1:100, label=paste('-r',1:100,sep='')  )		#
		dummy			<- pipeline.vary[, {									#
					if(1)#
					{#
						#	scenario A					#
						infile.ind		<- paste('281014_HPTN071_scA_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scA_rep',REP,sep='')#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141026a'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																		#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.11')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)	#
						stop()#
					}#
					if(1)#
					{#
						#	scenario B						#
						infile.ind		<- paste('281014_HPTN071_scB_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scB_rep',REP,sep='')#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141026b'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																														#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.15')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)						#
					}#
					if(1)#
					{#
						#	scenario C						#
						infile.ind		<- paste('281014_HPTN071_scC_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scC_rep',REP,sep='')	#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141026c'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																														#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.185')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)	#
					}					#
				}, by='label']
pipeline.vary	<- data.table(	REP=1:100, label=paste('-r',1:100,sep='')  )		#
		dummy			<- pipeline.vary[, {									#
					if(1)#
					{#
						#	scenario A					#
						infile.ind		<- paste('281014_HPTN071_scA_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scA_rep',REP,sep='')#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141026a'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																		#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.11')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)	#
					}#
					if(1)#
					{#
						#	scenario B						#
						infile.ind		<- paste('281014_HPTN071_scB_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scB_rep',REP,sep='')#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141026b'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																														#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.15')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)						#
					}#
					if(1)#
					{#
						#	scenario C						#
						infile.ind		<- paste('281014_HPTN071_scC_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scC_rep',REP,sep='')	#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141026c'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																														#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.185')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)	#
					}					#
				}, by='label']
require(rPANGEAHIVsim)
indir	<- '/Users/Oliver/git/Pangea__Oct27_2014_code'#
	infiles	<- data.table(FILE= list.files(path=indir, pattern='*SCENARIO.*.csv'))#
	set(infiles, NULL, 'DATE', infiles[, substr(FILE, 1, 6)])#
	set(infiles, NULL, 'END', infiles[, substr(FILE, nchar(FILE)-6, nchar(FILE))])#
	set(infiles, NULL, 'REP', infiles[, regmatches(FILE,regexpr('RUN[0-9]+',FILE))])#
	set(infiles, NULL, 'REP', infiles[, as.numeric(substr(REP, 4, nchar(REP)))])#
	set(infiles, NULL, 'SCENARIO', infiles[, regmatches(FILE,regexpr('SCENARIO_[0-3]',FILE))])#
	set(infiles, NULL, 'SCENARIO', infiles[, substr(SCENARIO, nchar(SCENARIO), nchar(SCENARIO))])#
	set(infiles, infiles[, which(SCENARIO=='0')], 'SCENARIO', 'A')#
	set(infiles, infiles[, which(SCENARIO=='3')], 'SCENARIO', 'B')#
	set(infiles, infiles[, which(SCENARIO=='2')], 'SCENARIO', 'C')#
	set(infiles, NULL, 'TO', infiles[, paste(DATE,'_HPTN071_sc',SCENARIO,'_rep',REP,'_',END,sep='')])#
	infiles[, file.rename(paste(indir,'/',FILE,sep=''), paste(indir,'/',TO,sep='')), by='FILE']
infiles
indir	<- '/Users/Oliver/git/Pangea__Oct27_2014_code'#
	infiles	<- data.table(FILE= list.files(path=indir, pattern='*SCENARIO.*.csv'))#
	set(infiles, NULL, 'DATE', infiles[, substr(FILE, 1, 6)])#
	set(infiles, NULL, 'END', infiles[, substr(FILE, nchar(FILE)-6, nchar(FILE))])#
	set(infiles, NULL, 'REP', infiles[, regmatches(FILE,regexpr('RUN[0-9]+',FILE))])#
	set(infiles, NULL, 'REP', infiles[, as.numeric(substr(REP, 4, nchar(REP)))])#
	set(infiles, NULL, 'SCENARIO', infiles[, regmatches(FILE,regexpr('SCENARIO_[0-3]',FILE))])#
	set(infiles, NULL, 'SCENARIO', infiles[, substr(SCENARIO, nchar(SCENARIO), nchar(SCENARIO))])#
	set(infiles, infiles[, which(SCENARIO=='0')], 'SCENARIO', 'A')#
	set(infiles, infiles[, which(SCENARIO=='3')], 'SCENARIO', 'B')#
	set(infiles, infiles[, which(SCENARIO=='2')], 'SCENARIO', 'C')#
	set(infiles, NULL, 'TO', infiles[, paste(DATE,'_HPTN071_sc',SCENARIO,'_rep',REP,'_',END,sep='')])
infiles
infiles[, file.rename(paste(indir,'/',FILE,sep=''), paste(indir,'/',TO,sep='')), by='FILE']
indir			<- '/Users/Oliver/git/Pangea__Oct27_2014_code'#
		pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42,#
				s.INC.recent=0.1, s.INC.recent.len=5, s.PREV.min=0.01, s.PREV.max=0, #
				epi.model='HPTN071', epi.dt=1/48, epi.import=0.05,#
				v.N0tau=1, v.r=2.851904, v.T50=-2,#
				wher.mu=log(0.003358613)-0.3^2/2, wher.sigma=0.3, bwerm.mu=log(0.002239075)-0.13^2/2, bwerm.sigma=0.13, er.gamma=0,#
				dbg.GTRparam=0, dbg.rER=0, index.starttime.mode='normal', startseq.mode='sample', seqtime.mode='Unif12')						#
		pipeline.vary	<- data.table(	REP=1:1, label=paste('-r',1:1,sep='')  )		#
		dummy			<- pipeline.vary[, {									#
					if(1)#
					{#
						#	scenario A					#
						infile.ind		<- paste('281014_HPTN071_scA_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scA_rep',REP,sep='')#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141026a'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																		#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.11')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)	#
					}#
					if(1)#
					{#
						#	scenario B						#
						infile.ind		<- paste('281014_HPTN071_scB_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scB_rep',REP,sep='')#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141026b'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																														#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.15')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)						#
					}#
					if(1)#
					{#
						#	scenario C						#
						infile.ind		<- paste('281014_HPTN071_scC_rep',REP,sep='')#
						infile.trm		<- paste('281014_HPTN071_scC_rep',REP,sep='')	#
						tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp141026c'#
						tmpdir			<- paste(tmpdir,label,sep='')#
						dir.create(tmpdir, showWarnings=FALSE)																														#
						set(pipeline.args, which( pipeline.args$stat=='s.PREV.max' ), 'v', '0.185')#
						file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,'_IND.csv',sep=''))#
						file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,'_TRM.csv',sep=''))#
						file			<- rPANGEAHIVsim.pipeline(tmpdir, paste(infile.ind,'_IND.csv',sep=''), paste(infile.trm,'_TRM.csv',sep=''), tmpdir, pipeline.args=pipeline.args)#
						system(file)	#
					}					#
				}, by='label']
indir	<- '/Users/Oliver/duke/2014_Gates/methods_comparison_pipeline/Pangea_Oct27_2014_sim/CD4-toBlind'	#
	infiles	<- data.table(FILE= list.files(path=indir, pattern='*.csv'))#
	set(infiles, NULL, 'EPI', infiles[, sapply(strsplit(FILE, '_'),'[[',1)])#
	set(infiles, NULL, 'TIMEPOINT', infiles[, sapply(strsplit(FILE, '_'),'[[',3)])
infiles
set(infiles, NULL, 'EPI', infiles[, factor(EPI, levels=c(1,2,3), labels=c('A','B','C'))])
infiles
indir	<- '/Users/Oliver/duke/2014_Gates/methods_comparison_pipeline/Pangea_Oct27_2014_sim/CD4-toBlind'	#
	infiles	<- data.table(FILE= list.files(path=indir, pattern='*.csv'))#
	set(infiles, NULL, 'EPI', infiles[, sapply(strsplit(FILE, '_'),'[[',1)])#
	set(infiles, NULL, 'EPI', infiles[, factor(EPI, levels=c('A','B','C'), labels=c(1,2,3))])#
	set(infiles, NULL, 'TIMEPOINT', infiles[, sapply(strsplit(FILE, '_'),'[[',3)])
infiles
set(infiles, NULL, 'TIMEPOINT_BLINDED', c('B','A','C',  'D','F','E',   'I','H','G','I','H','G'))
infiles
indir	<- '/Users/Oliver/duke/2014_Gates/methods_comparison_pipeline/Pangea_Oct27_2014_sim/CD4-toBlind'	#
	infiles	<- data.table(FILE= list.files(path=indir, pattern='*.csv'))#
	set(infiles, NULL, 'EPI', infiles[, sapply(strsplit(FILE, '_'),'[[',1)])#
	set(infiles, NULL, 'EPI', infiles[, factor(EPI, levels=c('A','B','C'), labels=c(1,2,3))])#
	set(infiles, NULL, 'TIMEPOINT', infiles[, sapply(strsplit(FILE, '_'),'[[',3)])#
	set(infiles, NULL, 'TIMEPOINT_BLINDED', c('B','A','C',  'D','F','E',   'I','H','G','I','H','G'))#
	set(infiles, NULL, 'SAMPLE', c(rep(1,3),  rep(1,3),   rep(1,3),rep(2,3)))#
	set(infiles, NULL, 'TO', infiles[, paste('281014','_Village_sc',TIMEPOINT_BLINDED,'_sample',SAMPLE,'_epi',EPI,'.fasta',sep='')])
infiles
infiles[, file.rename(paste(indir,'/',FILE,sep=''), paste(indir,'/',TO,sep='')), by='FILE']
z<- load('~/git/phylodesign/pkg/inst/misc/popart.141028.ForOlli.RData')
z
require(phylodesign)
require(data.table)		#
	dir.name		<- "popartpower_acute"#
	my.mkdir(DATA,dir.name)#
	dir.name		<- paste(DATA,dir.name,sep='/')	#
	resume			<- 1#
	verbose			<- 1#
	plot.increment	<- 0.05#
	m.type			<- "Acute"	#
	cohort.size		<- 2500	#
	cohort.dur		<- 2	#
	theta.EE.H0		<- 0.1#
	theta.EE.H1		<- 0.4#
	theta.UE		<- 0.3#
	theta.TE		<- theta.UE / 5#
	test.alpha		<- 0.05#
	debug			<- 1#
	p.lab			<- 0.75*0.9			#set lower as discussed	70% from CD4 90% from sequencing#
	p.consent.coh	<- 0.9				#90% consent to main study already in Anne's numbers, and of those 90% consent to phylo study				#
	p.consent.clu	<- 0.8				#waiver#
	p.vhcc.prev.AB	<- 1				#already in PopART model estimate#
	p.vhcc.inc.AB	<- 1				#already in PopART model estimate#
	p.vhcc.prev.C	<- 1				#already in PopART model estimate#
	p.vhcc.inc.C	<- 1				#already in PopART model estimate#
	opt.design		<- "PC12+HCC"#
	opt.analysis	<- paste(round(theta.EE.H0*100,d=0),round(theta.EE.H1*100,d=0),sep='')#
	opt.analysis	<- "central-1016"#
	pooled.n		<- 1#
	#compute df.hypotheses on Inc and E2E#
	tmp				<- load(system.file(package="phylodesign", "misc", "popart.propacute.131016.R"))#
	if(verbose) cat(paste("loaded",paste(tmp,collapse=' ')))		#
	#set(df.prop, which(df.prop[,target=="central"]), "target", "central-1016")#
	#set(df.prop, which(df.prop[,target=="optimistic"]), "target", "optimistic-1016")#
	df.hyp			<- data.table(arm=c('A','A','B','B','C','C'), EE=c(0.1, 0.4), HYP=c('H0','H1'))#
	#	don t have update proportions by arm#
	#df.hyp			<- df.prop[, {#
	#								tmp<- c(which.min(E2E), which.max(E2E))#
	#								list( h=c("H0","H1"), Inc= Inc[tmp], E2E= E2E[tmp], O2E=O2E[tmp])#
	#							}, by=c("country", "arm","target")]#
	#compute df.hypotheses on O2E#
	df.nocontam		<- df.prop[, list(p.nocontam= 1-median(O2E)), by=c("country", "arm","target")]#
	sites			<- popart.getdata.randomized.arm( pooled.n, rtn.fixed=debug, rtn.phylostudy=1 )#
	sites[which(sites[,"country"]==1),"country"]	<- "ZA"#
	sites[which(sites[,"country"]==2),"country"]	<- "SA"	#
	sites			<- as.data.table(sites)
setwd("/Users/Oliver/git/phylodesign/pkg"); source("misc/phdes.startme.R")
require(data.table)		#
	dir.name		<- "popartpower_acute"#
	my.mkdir(DATA,dir.name)#
	dir.name		<- paste(DATA,dir.name,sep='/')	#
	resume			<- 1#
	verbose			<- 1#
	plot.increment	<- 0.05#
	m.type			<- "Acute"	#
	cohort.size		<- 2500	#
	cohort.dur		<- 2	#
	theta.EE.H0		<- 0.1#
	theta.EE.H1		<- 0.4#
	theta.UE		<- 0.3#
	theta.TE		<- theta.UE / 5#
	test.alpha		<- 0.05#
	debug			<- 1#
	p.lab			<- 0.75*0.9			#set lower as discussed	70% from CD4 90% from sequencing#
	p.consent.coh	<- 0.9				#90% consent to main study already in Anne's numbers, and of those 90% consent to phylo study				#
	p.consent.clu	<- 0.8				#waiver#
	p.vhcc.prev.AB	<- 1				#already in PopART model estimate#
	p.vhcc.inc.AB	<- 1				#already in PopART model estimate#
	p.vhcc.prev.C	<- 1				#already in PopART model estimate#
	p.vhcc.inc.C	<- 1				#already in PopART model estimate#
	opt.design		<- "PC12+HCC"#
	opt.analysis	<- paste(round(theta.EE.H0*100,d=0),round(theta.EE.H1*100,d=0),sep='')#
	opt.analysis	<- "central-1016"#
	pooled.n		<- 1#
	#compute df.hypotheses on Inc and E2E#
	tmp				<- load(system.file(package="phylodesign", "misc", "popart.propacute.131016.R"))#
	if(verbose) cat(paste("loaded",paste(tmp,collapse=' ')))		#
	#set(df.prop, which(df.prop[,target=="central"]), "target", "central-1016")#
	#set(df.prop, which(df.prop[,target=="optimistic"]), "target", "optimistic-1016")#
	df.hyp			<- data.table(arm=c('A','A','B','B','C','C'), EE=c(0.1, 0.4), HYP=c('H0','H1'))#
	#	don t have update proportions by arm#
	#df.hyp			<- df.prop[, {#
	#								tmp<- c(which.min(E2E), which.max(E2E))#
	#								list( h=c("H0","H1"), Inc= Inc[tmp], E2E= E2E[tmp], O2E=O2E[tmp])#
	#							}, by=c("country", "arm","target")]#
	#compute df.hypotheses on O2E#
	df.nocontam		<- df.prop[, list(p.nocontam= 1-median(O2E)), by=c("country", "arm","target")]#
	sites			<- popart.getdata.randomized.arm( pooled.n, rtn.fixed=debug, rtn.phylostudy=1 )#
	sites[which(sites[,"country"]==1),"country"]	<- "ZA"#
	sites[which(sites[,"country"]==2),"country"]	<- "SA"	#
	sites			<- as.data.table(sites)
tmp			<- load(system.file(package="phylodesign", "misc", "popart.141028.ForOlli.RData"))#
	if(verbose) cat(paste("loaded",paste(tmp,collapse=' ')))#
	result		<- as.data.table(result)#
	setnames(result, c("comm.name","allocatedArms"), c("comid_old","arm"))#
	result.CD4	<- as.data.table(result_old)#
	setnames(result.CD4, c("comm.name","allocatedArms"), c("comid_old","arm"))
result.CD4
result.CD4[, list(total=sum(CD4total.year2+CD4total.year3+CD4total.year4)), by='arm']
result.CD4[, list(total=sum(CD4amongstART_firstvisit.year2+CD4amongstART_firstvisit.year3+CD4amongstART_firstvisit.year4)), by='arm']
87295+59467+44504
6971+4551+3926
tmp			<- subset( result, select=c(comid_old, arm, adultpopsize, cumulincyear1, cumulincyear2, cumulincyear3, prevalence0m, prevalence12m, prevalence24m, prevalence36m) )#
	setkey(tmp, arm)#
	pred.model	<- result[, list( 	arm=arm, #
					all.prev= round(adultpopsize*prevalence36m), #
					all.inc= round(adultpopsize*sum(cumulincyear1, cumulincyear2, cumulincyear3)) ), by="comid_old" ]#
	pred.model[, prediction:= "central"]#
	##
	#	first CD4 samples in year 2 3 4 in HCF#
	#	add CD4first.year2 (these are first timers in HCF) + CD4repeated.year2	(these are repeaters in HCF but first timers in phylo study)#
	##
	tmp			<- subset( result.CD4, select=c(comid_old, arm, CD4first.year2, CD4first.year3, CD4first.year4, CD4incidAmongstFirst.year2, CD4incidAmongstFirst.year3, CD4incidAmongstFirst.year4, CD4repeated.year2))#
	set(tmp, NULL, 'CD4first.year2', tmp[, CD4first.year2+CD4repeated.year2])				#
	set(tmp, NULL, 'HCF.prev', tmp[, CD4first.year2+CD4first.year3+CD4first.year4])	#
	set(tmp, NULL, 'HCF.inc', tmp[, CD4incidAmongstFirst.year2+CD4incidAmongstFirst.year3+CD4incidAmongstFirst.year4])#
	tmp[,prediction:= "central"]#
	tmp[,country:= "ZA"]#
	samples.CD4	<- subset( tmp, select=c(comid_old, country, prediction, HCF.inc, HCF.prev) )
samples.PC	<- subset(result, select=c(comid_old, arm, NbInc12mNotLostAndConsenting, NbInc24mNotLostAndConsenting, NbInc36mNotLostAndConsenting))#
	#samples.PC[, list(m12=sum(NbInc12mNotLostAndConsenting), m24=sum(NbInc24mNotLostAndConsenting), m36=sum(NbInc36mNotLostAndConsenting)), by='arm']#
	#samples.PC[, list(m12=sum(NbInc12mNotLostAndConsenting), m24=sum(NbInc24mNotLostAndConsenting), m36=sum(NbInc36mNotLostAndConsenting))]	#
	tmp			<- subset(result, select=c(comid_old, arm, NbPrevPC12AmongstInitial2500, NbPrevPC12NotLostAndConsenting, NbPrevPC12NotOnART, NbPrevPC24AmongstInitial2500, NbPrevPC24NotLostAndConsenting, NbPrevPC24NotOnART, NbPrevPC36AmongstInitial2500, NbPrevPC36NotLostAndConsenting, NbPrevPC36NotOnART))#
	tmp[, PC12ART:= NbPrevPC12NotLostAndConsenting-NbPrevPC12NotOnART]#
	tmp[, PC12Lost:= NbPrevPC12AmongstInitial2500-NbPrevPC12NotLostAndConsenting]#
	tmp[, list(PC12ART=sum(PC12ART)), by='arm']#
	tmp[, list(PC12ART=sum(PC12ART))]#
	tmp[, list(PC12Lost=sum(PC12Lost)), by='arm']#
	tmp[, list(PC12Lost=sum(PC12Lost))]
tmp			<- subset(result, select=c(comid_old, NbPrevPC0NotOnART, NbPrevPC12NotOnART))#
	samples.PC	<- merge(samples.PC, tmp, by=c('comid_old'))#
	samples.PC[, PC0.prev:= NbPrevPC0NotOnART]#
	samples.PC[, PC12.prev:= NbPrevPC12NotOnART]#
	samples.PC[, PC0.inc:= round(NbInc12mNotLostAndConsenting+NbInc24mNotLostAndConsenting+NbInc36mNotLostAndConsenting)]#
	samples.PC[, PC12.inc:= round(NbInc12mNotLostAndConsenting+NbInc24mNotLostAndConsenting+NbInc36mNotLostAndConsenting)]#
	samples.PC[, prediction:= "central"]#
	samples.PC	<- rbindlist( list( 	samples.PC[, list(comid_old=comid_old, prediction=prediction, design="PC+HCC", PC.prev=PC0.prev,  PC.inc=PC0.inc)],#
					samples.PC[, list(comid_old=comid_old, prediction=prediction, design="PC12+HCC", PC.prev=PC12.prev, PC.inc=PC12.inc)]	)		)#
	#	add PC and HCF samples#
	samples.CD4	<- merge(samples.PC, samples.CD4, by=c("comid_old","prediction"))#
	samples.CD4	<- merge(samples.CD4, pred.model, by=c("comid_old","prediction"))#
	##
	samples.CD4	<- subset(samples.CD4, design==opt.design)#
	setkey(samples.CD4, arm)#
	samples.CD4
samples.seq		<- popart.predicted.sequences.141006(samples.CD4, df.nocontam, opt.analysis, p.lab, p.inpatient.c=0.95, p.inpatient.p=0.9, p.consent.coh=p.consent.coh, p.consent.clu=p.consent.clu )#
		tmp				<- merge( subset( sites, select=c(comid_old, triplet.id) ), samples.seq, by="comid_old")#
		setkey(tmp, triplet.id, arm)		#
		setnames(tmp, c("%prev","%inc","%avg"), c("pc.prev","pc.inc","pc.avg"))#
		tmp		<- tmp[, list(PC.prev=sum(PC.prev), PC.inc=sum(PC.inc), nonPC.prev=sum(nonPC.prev), nonPC.inc=sum(nonPC.inc), all.prev=sum(all.prev), all.inc=sum(all.inc), pc.prev=mean(pc.prev), pc.inc=mean(pc.inc), pc.avg=mean(pc.avg)), by=c("country","arm")]#
		print(tmp)
subset(samples.CD4, select=c(PC.prev, PC.inc, HCF.inc, HCF.prev))
subset(samples.CD4, select=c(PC.prev, PC.inc, HCF.inc, HCF.prev, arm))
subset(samples.CD4, select=c(PC.prev, PC.inc, HCF.inc, HCF.prev, arm))[, list(.SDcols,sum), by='arm']
subset(samples.CD4, select=c(PC.prev, PC.inc, HCF.inc, HCF.prev, arm))[, list(.SDcol,sum), by='arm']
subset(samples.CD4, select=c(PC.prev, PC.inc, HCF.inc, HCF.prev, arm))[, list(.SDCol,sum), by='arm']
subset(samples.CD4, select=c(PC.prev, PC.inc, HCF.inc, HCF.prev, arm))[, list(.SDCols,sum), by='arm']
subset(samples.CD4, select=c(PC.prev, PC.inc, HCF.inc, HCF.prev, arm))[, list(.SD,sum), by='arm']
?data.table
subset(samples.CD4, select=c(PC.prev, PC.inc, HCF.inc, HCF.prev, arm))[, lapply(.SD,sum), by='arm']
tmp2<- subset(samples.CD4, select=c(PC.prev, PC.inc, HCF.inc, HCF.prev, arm))[, lapply(.SD,sum), by='arm']
tmp2[, x:= HCF.inc+HCF.pre]
tmp2[, x:= HCF.inc+HCF.prev]
tmp2
5581+6436+4450
tmp2[, sum(HCF.inc)]
sites
tmp			<- load(system.file(package="phylodesign", "misc", "popart.141028.ForOlli.RData"))#
	if(verbose) cat(paste("loaded",paste(tmp,collapse=' ')))#
	result		<- as.data.table(result)#
	setnames(result, c("comm.name","allocatedArms"), c("comid_old","arm"))#
	result.CD4	<- as.data.table(result_old)#
	setnames(result.CD4, c("comm.name","allocatedArms"), c("comid_old","arm"))#
	#	total CD4 tests performed (only for protocol)#
	result.CD4[, list(total=sum(CD4total.year2+CD4total.year3+CD4total.year4)), by='arm']#
	#	total first CD4 amongst those on ART#
	#	ignores first phylo testers in year 2#
	result.CD4[, list(total=sum(CD4amongstART_firstvisit.year2+CD4amongstART_firstvisit.year3+CD4amongstART_firstvisit.year4)), by='arm']#
	##
	#	prevalence at year 3 and sum of incident#
	##
	tmp			<- subset( result, select=c(comid_old, arm, adultpopsize, cumulincyear1, cumulincyear2, cumulincyear3, prevalence0m, prevalence12m, prevalence24m, prevalence36m) )#
	setkey(tmp, arm)#
	pred.model	<- result[, list( 	arm=arm, #
					all.prev= round(adultpopsize*prevalence36m), #
					all.inc= round(adultpopsize*sum(cumulincyear1, cumulincyear2, cumulincyear3)) ), by="comid_old" ]#
	pred.model[, prediction:= "central"]#
	##
	#	first CD4 samples in year 2 3 4 in HCF#
	#	add CD4first.year2 (these are first timers in HCF) + CD4repeated.year2	(these are repeaters in HCF but first timers in phylo study)#
	##
	tmp			<- subset( result.CD4, select=c(comid_old, arm, CD4first.year2, CD4first.year3, CD4first.year4, CD4incidAmongstFirst.year2, CD4incidAmongstFirst.year3, CD4incidAmongstFirst.year4, CD4repeated.year2))#
	set(tmp, NULL, 'CD4first.year2', tmp[, CD4first.year2+CD4repeated.year2])				#
	set(tmp, NULL, 'HCF.prev', tmp[, CD4first.year2+CD4first.year3+CD4first.year4])	#
	set(tmp, NULL, 'HCF.inc', tmp[, CD4incidAmongstFirst.year2+CD4incidAmongstFirst.year3+CD4incidAmongstFirst.year4])#
	tmp[,prediction:= "central"]#
	tmp[,country:= "ZA"]#
	samples.CD4	<- subset( tmp, select=c(comid_old, country, prediction, HCF.inc, HCF.prev) )#
	##
	#	seroconverters in PC at PC12, PC24, PC36#
	##
	samples.PC	<- subset(result, select=c(comid_old, arm, NbInc12mNotLostAndConsenting, NbInc24mNotLostAndConsenting, NbInc36mNotLostAndConsenting))
samples.PC
tmp			<- subset(result, select=c(comid_old, arm, NbPrevPC12AmongstInitial2500, NbPrevPC12NotLostAndConsenting, NbPrevPC12NotOnART, NbPrevPC24AmongstInitial2500, NbPrevPC24NotLostAndConsenting, NbPrevPC24NotOnART, NbPrevPC36AmongstInitial2500, NbPrevPC36NotLostAndConsenting, NbPrevPC36NotOnART))#
	tmp[, PC12ART:= NbPrevPC12NotLostAndConsenting-NbPrevPC12NotOnART]#
	tmp[, PC12Lost:= NbPrevPC12AmongstInitial2500-NbPrevPC12NotLostAndConsenting]#
	tmp[, list(PC12ART=sum(PC12ART)), by='arm']#
	tmp[, list(PC12ART=sum(PC12ART))]#
	tmp[, list(PC12Lost=sum(PC12Lost)), by='arm']#
	tmp[, list(PC12Lost=sum(PC12Lost))]
366+486+642
tmp			<- load(system.file(package="phylodesign", "misc", "popart.141028.ForOlli.RData"))#
	if(verbose) cat(paste("loaded",paste(tmp,collapse=' ')))#
	result		<- as.data.table(result)#
	setnames(result, c("comm.name","allocatedArms"), c("comid_old","arm"))#
	result.CD4	<- as.data.table(result_old)#
	setnames(result.CD4, c("comm.name","allocatedArms"), c("comid_old","arm"))#
	#	total CD4 tests performed (only for protocol)#
	result.CD4[, list(total=sum(CD4total.year2+CD4total.year3+CD4total.year4)), by='arm']#
	#	total first CD4 amongst those on ART#
	#	ignores first phylo testers in year 2#
	result.CD4[, list(total=sum(CD4amongstART_firstvisit.year2+CD4amongstART_firstvisit.year3+CD4amongstART_firstvisit.year4)), by='arm']#
	##
	#	prevalence at year 3 and sum of incident#
	##
	tmp			<- subset( result, select=c(comid_old, arm, adultpopsize, cumulincyear1, cumulincyear2, cumulincyear3, prevalence0m, prevalence12m, prevalence24m, prevalence36m) )#
	setkey(tmp, arm)#
	pred.model	<- result[, list( 	arm=arm, #
					all.prev= round(adultpopsize*prevalence36m), #
					all.inc= round(adultpopsize*sum(cumulincyear1, cumulincyear2, cumulincyear3)) ), by="comid_old" ]#
	pred.model[, prediction:= "central"]#
	##
	#	first CD4 samples in year 2 3 4 in HCF#
	#	add CD4first.year2 (these are first timers in HCF) + CD4repeated.year2	(these are repeaters in HCF but first timers in phylo study)#
	##
	tmp			<- subset( result.CD4, select=c(comid_old, arm, CD4first.year2, CD4first.year3, CD4first.year4, CD4incidAmongstFirst.year2, CD4incidAmongstFirst.year3, CD4incidAmongstFirst.year4, CD4repeated.year2))#
	set(tmp, NULL, 'CD4first.year2', tmp[, CD4first.year2+CD4repeated.year2])				#
	set(tmp, NULL, 'HCF.prev', tmp[, CD4first.year2+CD4first.year3+CD4first.year4])	#
	set(tmp, NULL, 'HCF.inc', tmp[, CD4incidAmongstFirst.year2+CD4incidAmongstFirst.year3+CD4incidAmongstFirst.year4])#
	tmp[,prediction:= "central"]#
	tmp[,country:= "ZA"]#
	samples.CD4	<- subset( tmp, select=c(comid_old, country, prediction, HCF.inc, HCF.prev) )#
	##
	#	seroconverters in PC at PC12, PC24, PC36#
	##
	samples.PC	<- subset(result, select=c(comid_old, arm, NbInc12mNotLostAndConsenting, NbInc24mNotLostAndConsenting, NbInc36mNotLostAndConsenting))#
	#samples.PC[, list(m12=sum(NbInc12mNotLostAndConsenting), m24=sum(NbInc24mNotLostAndConsenting), m36=sum(NbInc36mNotLostAndConsenting)), by='arm']#
	#samples.PC[, list(m12=sum(NbInc12mNotLostAndConsenting), m24=sum(NbInc24mNotLostAndConsenting), m36=sum(NbInc36mNotLostAndConsenting))]	#
	tmp			<- subset(result, select=c(comid_old, arm, NbPrevPC12AmongstInitial2500, NbPrevPC12NotLostAndConsenting, NbPrevPC12NotOnART, NbPrevPC24AmongstInitial2500, NbPrevPC24NotLostAndConsenting, NbPrevPC24NotOnART, NbPrevPC36AmongstInitial2500, NbPrevPC36NotLostAndConsenting, NbPrevPC36NotOnART))#
	tmp[, PC12ART:= NbPrevPC12NotLostAndConsenting-NbPrevPC12NotOnART]#
	tmp[, PC12Lost:= NbPrevPC12AmongstInitial2500-NbPrevPC12NotLostAndConsenting]#
	tmp[, list(PC12ART=sum(PC12ART)), by='arm']#
	tmp[, list(PC12ART=sum(PC12ART))]#
	tmp[, list(PC12Lost=sum(PC12Lost)), by='arm']#
	tmp[, list(PC12Lost=sum(PC12Lost))]	#
	##
	#	untreated prevalent at phylo baseline in PC at PC0, PC12#
	#	#
	tmp			<- subset(result, select=c(comid_old, NbPrevPC0NotOnART, NbPrevPC12NotOnART))#
	samples.PC	<- merge(samples.PC, tmp, by=c('comid_old'))#
	samples.PC[, PC0.prev:= NbPrevPC0NotOnART]#
	samples.PC[, PC12.prev:= NbPrevPC12NotOnART]#
	samples.PC[, PC0.inc:= round(NbInc12mNotLostAndConsenting+NbInc24mNotLostAndConsenting+NbInc36mNotLostAndConsenting)]#
	samples.PC[, PC12.inc:= round(NbInc12mNotLostAndConsenting+NbInc24mNotLostAndConsenting+NbInc36mNotLostAndConsenting)]#
	samples.PC[, prediction:= "central"]#
	samples.PC	<- rbindlist( list( 	samples.PC[, list(comid_old=comid_old, prediction=prediction, design="PC+HCC", PC.prev=PC0.prev,  PC.inc=PC0.inc)],#
					samples.PC[, list(comid_old=comid_old, prediction=prediction, design="PC12+HCC", PC.prev=PC12.prev, PC.inc=PC12.inc)]	)		)#
	#	add PC and HCF samples#
	samples.CD4	<- merge(samples.PC, samples.CD4, by=c("comid_old","prediction"))#
	samples.CD4	<- merge(samples.CD4, pred.model, by=c("comid_old","prediction"))#
	##
	samples.CD4	<- subset(samples.CD4, design==opt.design)#
	setkey(samples.CD4, arm)#
	samples.CD4
samples.PC
samples.PC	<- subset(result, select=c(comid_old, arm, NbInc12mNotLostAndConsenting, NbInc24mNotLostAndConsenting, NbInc36mNotLostAndConsenting))
samples.PC
samples.PC[, list(m12=sum(NbInc12mNotLostAndConsenting), m24=sum(NbInc24mNotLostAndConsenting), m36=sum(NbInc36mNotLostAndConsenting)), by='arm']
samples.PC[, list(m12=sum(NbInc12mNotLostAndConsenting), m24=sum(NbInc24mNotLostAndConsenting), m36=sum(NbInc36mNotLostAndConsenting))]
tmp			<- load(system.file(package="phylodesign", "misc", "popart.141028.ForOlli.RData"))#
	if(verbose) cat(paste("loaded",paste(tmp,collapse=' ')))#
	result		<- as.data.table(result)#
	setnames(result, c("comm.name","allocatedArms"), c("comid_old","arm"))#
	result.CD4	<- as.data.table(result_old)#
	setnames(result.CD4, c("comm.name","allocatedArms"), c("comid_old","arm"))#
	#	total CD4 tests performed (only for protocol)#
	result.CD4[, list(total=sum(CD4total.year2+CD4total.year3+CD4total.year4)), by='arm']#
	#	total first CD4 amongst those on ART#
	#	ignores first phylo testers in year 2#
	result.CD4[, list(total=sum(CD4amongstART_firstvisit.year2+CD4amongstART_firstvisit.year3+CD4amongstART_firstvisit.year4)), by='arm']#
	##
	#	prevalence at year 3 and sum of incident#
	##
	tmp			<- subset( result, select=c(comid_old, arm, adultpopsize, cumulincyear1, cumulincyear2, cumulincyear3, prevalence0m, prevalence12m, prevalence24m, prevalence36m) )#
	setkey(tmp, arm)#
	pred.model	<- result[, list( 	arm=arm, #
					all.prev= round(adultpopsize*prevalence36m), #
					all.inc= round(adultpopsize*sum(cumulincyear1, cumulincyear2, cumulincyear3)) ), by="comid_old" ]#
	pred.model[, prediction:= "central"]#
	##
	#	first CD4 samples in year 2 3 4 in HCF#
	#	add CD4first.year2 (these are first timers in HCF) + CD4repeated.year2	(these are repeaters in HCF but first timers in phylo study)#
	##
	tmp			<- subset( result.CD4, select=c(comid_old, arm, CD4first.year2, CD4first.year3, CD4first.year4, CD4incidAmongstFirst.year2, CD4incidAmongstFirst.year3, CD4incidAmongstFirst.year4, CD4repeated.year2))#
	set(tmp, NULL, 'CD4first.year2', tmp[, CD4first.year2+CD4repeated.year2])				#
	set(tmp, NULL, 'HCF.prev', tmp[, CD4first.year2+CD4first.year3+CD4first.year4])	#
	set(tmp, NULL, 'HCF.inc', tmp[, CD4incidAmongstFirst.year2+CD4incidAmongstFirst.year3+CD4incidAmongstFirst.year4])#
	tmp[,prediction:= "central"]#
	tmp[,country:= "ZA"]#
	samples.CD4	<- subset( tmp, select=c(comid_old, country, prediction, HCF.inc, HCF.prev) )#
	##
	#	seroconverters in PC at PC12, PC24, PC36#
	##
	samples.PC	<- subset(result, select=c(comid_old, arm, NbInc12mNotLostAndConsenting, NbInc24mNotLostAndConsenting, NbInc36mNotLostAndConsenting))#
	#	for protocol:#
	samples.PC[, list(m12=sum(NbInc12mNotLostAndConsenting), m24=sum(NbInc24mNotLostAndConsenting), m36=sum(NbInc36mNotLostAndConsenting)), by='arm']#
	samples.PC[, list(m12=sum(NbInc12mNotLostAndConsenting), m24=sum(NbInc24mNotLostAndConsenting), m36=sum(NbInc36mNotLostAndConsenting))]#
	##
	tmp			<- subset(result, select=c(comid_old, arm, NbPrevPC12AmongstInitial2500, NbPrevPC12NotLostAndConsenting, NbPrevPC12NotOnART, NbPrevPC24AmongstInitial2500, NbPrevPC24NotLostAndConsenting, NbPrevPC24NotOnART, NbPrevPC36AmongstInitial2500, NbPrevPC36NotLostAndConsenting, NbPrevPC36NotOnART))#
	tmp[, PC12ART:= NbPrevPC12NotLostAndConsenting-NbPrevPC12NotOnART]#
	tmp[, PC12Lost:= NbPrevPC12AmongstInitial2500-NbPrevPC12NotLostAndConsenting]#
	tmp[, list(PC12ART=sum(PC12ART)), by='arm']#
	tmp[, list(PC12ART=sum(PC12ART))]#
	tmp[, list(PC12Lost=sum(PC12Lost)), by='arm']#
	tmp[, list(PC12Lost=sum(PC12Lost))]	#
	##
	#	untreated prevalent at phylo baseline in PC at PC0, PC12#
	#	#
	tmp			<- subset(result, select=c(comid_old, NbPrevPC0NotOnART, NbPrevPC12NotOnART))#
	samples.PC	<- merge(samples.PC, tmp, by=c('comid_old'))#
	samples.PC[, PC0.prev:= NbPrevPC0NotOnART]#
	samples.PC[, PC12.prev:= NbPrevPC12NotOnART]#
	samples.PC[, PC0.inc:= round(NbInc12mNotLostAndConsenting+NbInc24mNotLostAndConsenting+NbInc36mNotLostAndConsenting)]#
	samples.PC[, PC12.inc:= round(NbInc12mNotLostAndConsenting+NbInc24mNotLostAndConsenting+NbInc36mNotLostAndConsenting)]#
	samples.PC[, prediction:= "central"]#
	samples.PC	<- rbindlist( list( 	samples.PC[, list(comid_old=comid_old, prediction=prediction, design="PC+HCC", PC.prev=PC0.prev,  PC.inc=PC0.inc)],#
					samples.PC[, list(comid_old=comid_old, prediction=prediction, design="PC12+HCC", PC.prev=PC12.prev, PC.inc=PC12.inc)]	)		)#
	#	add PC and HCF samples#
	samples.CD4	<- merge(samples.PC, samples.CD4, by=c("comid_old","prediction"))#
	samples.CD4	<- merge(samples.CD4, pred.model, by=c("comid_old","prediction"))#
	##
	samples.CD4	<- subset(samples.CD4, design==opt.design)#
	setkey(samples.CD4, arm)#
	samples.CD4
subset(samples.CD4, select=c(PC.prev, PC.inc, HCF.inc, HCF.prev, arm))[, lapply(.SD,sum), by='arm']
141+177+246
1494+564
564+2121
popart.predicted.firstCD4.141029<- function(sites, opt.design="PC12+HCC", verbose=0)#
{	#
	tmp			<- load(system.file(package="phylodesign", "misc", "popart.141028.ForOlli.RData"))#
	if(verbose) cat(paste("loaded",paste(tmp,collapse=' ')))#
	result		<- as.data.table(result)#
	setnames(result, c("comm.name","allocatedArms"), c("comid_old","arm"))#
	result.CD4	<- as.data.table(result_old)#
	setnames(result.CD4, c("comm.name","allocatedArms"), c("comid_old","arm"))#
	#	total CD4 tests performed (only for protocol)#
	result.CD4[, list(total=sum(CD4total.year2+CD4total.year3+CD4total.year4)), by='arm']#
	#	total first CD4 amongst those on ART#
	#	ignores first phylo testers in year 2#
	result.CD4[, list(total=sum(CD4amongstART_firstvisit.year2+CD4amongstART_firstvisit.year3+CD4amongstART_firstvisit.year4)), by='arm']#
	##
	#	prevalence at year 3 and sum of incident#
	##
	tmp			<- subset( result, select=c(comid_old, arm, adultpopsize, cumulincyear1, cumulincyear2, cumulincyear3, prevalence0m, prevalence12m, prevalence24m, prevalence36m) )#
	setkey(tmp, arm)#
	pred.model	<- result[, list( 	arm=arm, #
					all.prev= round(adultpopsize*prevalence36m), #
					all.inc= round(adultpopsize*sum(cumulincyear1, cumulincyear2, cumulincyear3)) ), by="comid_old" ]#
	pred.model[, prediction:= "central"]#
	##
	#	first CD4 samples in year 2 3 4 in HCF#
	#	add CD4first.year2 (these are first timers in HCF) + CD4repeated.year2	(these are repeaters in HCF but first timers in phylo study)#
	##
	tmp			<- subset( result.CD4, select=c(comid_old, arm, CD4first.year2, CD4first.year3, CD4first.year4, CD4incidAmongstFirst.year2, CD4incidAmongstFirst.year3, CD4incidAmongstFirst.year4, CD4repeated.year2))#
	set(tmp, NULL, 'CD4first.year2', tmp[, CD4first.year2+CD4repeated.year2])				#
	set(tmp, NULL, 'HCF.prev', tmp[, CD4first.year2+CD4first.year3+CD4first.year4])	#
	set(tmp, NULL, 'HCF.inc', tmp[, CD4incidAmongstFirst.year2+CD4incidAmongstFirst.year3+CD4incidAmongstFirst.year4])#
	tmp[,prediction:= "central"]#
	tmp[,country:= "ZA"]#
	samples.CD4	<- subset( tmp, select=c(comid_old, country, prediction, HCF.inc, HCF.prev) )#
	##
	#	seroconverters in PC at PC12, PC24, PC36#
	##
	samples.PC	<- subset(result, select=c(comid_old, arm, NbInc12mNotLostAndConsenting, NbInc24mNotLostAndConsenting, NbInc36mNotLostAndConsenting))#
	#	for protocol:#
	samples.PC[, list(m12=sum(NbInc12mNotLostAndConsenting), m24=sum(NbInc24mNotLostAndConsenting), m36=sum(NbInc36mNotLostAndConsenting)), by='arm']#
	samples.PC[, list(m12=sum(NbInc12mNotLostAndConsenting), m24=sum(NbInc24mNotLostAndConsenting), m36=sum(NbInc36mNotLostAndConsenting))]#
	##
	tmp			<- subset(result, select=c(comid_old, arm, NbPrevPC12AmongstInitial2500, NbPrevPC12NotLostAndConsenting, NbPrevPC12NotOnART, NbPrevPC24AmongstInitial2500, NbPrevPC24NotLostAndConsenting, NbPrevPC24NotOnART, NbPrevPC36AmongstInitial2500, NbPrevPC36NotLostAndConsenting, NbPrevPC36NotOnART))#
	tmp[, PC12ART:= NbPrevPC12NotLostAndConsenting-NbPrevPC12NotOnART]#
	tmp[, PC12Lost:= NbPrevPC12AmongstInitial2500-NbPrevPC12NotLostAndConsenting]#
	tmp[, list(PC12ART=sum(PC12ART)), by='arm']#
	tmp[, list(PC12ART=sum(PC12ART))]#
	tmp[, list(PC12Lost=sum(PC12Lost)), by='arm']#
	tmp[, list(PC12Lost=sum(PC12Lost))]	#
	##
	#	untreated prevalent at phylo baseline in PC at PC0, PC12#
	#	#
	tmp			<- subset(result, select=c(comid_old, NbPrevPC0NotOnART, NbPrevPC12NotOnART))#
	samples.PC	<- merge(samples.PC, tmp, by=c('comid_old'))#
	samples.PC[, PC0.prev:= NbPrevPC0NotOnART]#
	samples.PC[, PC12.prev:= NbPrevPC12NotOnART]#
	samples.PC[, PC0.inc:= round(NbInc12mNotLostAndConsenting+NbInc24mNotLostAndConsenting+NbInc36mNotLostAndConsenting)]#
	samples.PC[, PC12.inc:= round(NbInc12mNotLostAndConsenting+NbInc24mNotLostAndConsenting+NbInc36mNotLostAndConsenting)]#
	samples.PC[, prediction:= "central"]#
	samples.PC	<- rbindlist( list( 	samples.PC[, list(comid_old=comid_old, prediction=prediction, design="PC+HCC", PC.prev=PC0.prev,  PC.inc=PC0.inc)],#
					samples.PC[, list(comid_old=comid_old, prediction=prediction, design="PC12+HCC", PC.prev=PC12.prev, PC.inc=PC12.inc)]	)		)#
	#	add PC and HCF samples#
	samples.CD4	<- merge(samples.PC, samples.CD4, by=c("comid_old","prediction"))#
	samples.CD4	<- merge(samples.CD4, pred.model, by=c("comid_old","prediction"))#
	##
	samples.CD4	<- subset(samples.CD4, design==opt.design)#
	#	for protocol#
	subset(samples.CD4, select=c(PC.prev, PC.inc, HCF.inc, HCF.prev, arm))[, lapply(.SD,sum), by='arm']#
	##
	setkey(samples.CD4, arm)#
	samples.CD4#
}
samples.CD4		<- popart.predicted.firstCD4.141029(sites, opt.design)#
		#predicted sequences#
		samples.seq		<- popart.predicted.sequences.141006(samples.CD4, df.nocontam, opt.analysis, p.lab, p.inpatient.c=0.95, p.inpatient.p=0.9, p.consent.coh=p.consent.coh, p.consent.clu=p.consent.clu )#
		tmp				<- merge( subset( sites, select=c(comid_old, triplet.id) ), samples.seq, by="comid_old")#
		setkey(tmp, triplet.id, arm)		#
		setnames(tmp, c("%prev","%inc","%avg"), c("pc.prev","pc.inc","pc.avg"))#
		tmp		<- tmp[, list(PC.prev=sum(PC.prev), PC.inc=sum(PC.inc), nonPC.prev=sum(nonPC.prev), nonPC.inc=sum(nonPC.inc), all.prev=sum(all.prev), all.inc=sum(all.inc), pc.prev=mean(pc.prev), pc.inc=mean(pc.inc), pc.avg=mean(pc.avg)), by=c("country","arm")]#
		print(tmp)
p.consent.coh
p.consent.clu
subset(tmp, select=c(arm, PC.prev, PC.inc, nonPC.prev, nonPC.inc))[, lapply(.SDcols, sum), by='arm']
subset(tmp, select=c(arm, PC.prev, PC.inc, nonPC.prev, nonPC.inc))[, lapply(.SD, sum), by='arm']
subset(tmp, select=c(arm, PC.prev, PC.inc, nonPC.prev, nonPC.inc))[, lapply(.SD, sum)]
subset(tmp, select=c( PC.prev, PC.inc, nonPC.prev, nonPC.inc))[, lapply(.SD, sum)]
861   + 315   +    6992    +   988
861   + 315
6992    +   988
861   +     6992
315   +   988
samples.CD4		<- popart.predicted.firstCD4.141029(sites, opt.design)#
		#predicted sequences#
		samples.seq		<- popart.predicted.sequences.141006(samples.CD4, df.nocontam, opt.analysis, p.lab, p.inpatient.c=0.95, p.inpatient.p=0.9, p.consent.coh=p.consent.coh, p.consent.clu=p.consent.clu )#
		tmp				<- merge( subset( sites, select=c(comid_old, triplet.id) ), samples.seq, by="comid_old")#
		setkey(tmp, triplet.id, arm)		#
		setnames(tmp, c("%prev","%inc","%avg"), c("pc.prev","pc.inc","pc.avg"))#
		tmp		<- tmp[, list(PC.prev=sum(PC.prev), PC.inc=sum(PC.inc), nonPC.prev=sum(nonPC.prev), nonPC.inc=sum(nonPC.inc), all.prev=sum(all.prev), all.inc=sum(all.inc), pc.prev=mean(pc.prev), pc.inc=mean(pc.inc), pc.avg=mean(pc.avg)), by=c("country","arm")]#
		print(tmp)#
		subset(tmp, select=c( PC.prev, PC.inc, nonPC.prev, nonPC.inc))[, lapply(.SD, sum)]#
		#predicted sequence pairs#
		samples.seq		<- merge(samples.seq, subset(df.nocontam, target=="central", c(arm, country, p.nocontam)), by=c("country","arm"))#
		setnames(samples.seq, c("%prev","%inc","%avg"), c("pc.prev","pc.inc","pc.avg"))		#
		#total sum#
		#samples.seq[, list(PC.prev=sum(PC.prev), PC.inc=sum(PC.inc), nonPC.prev=sum(nonPC.prev), nonPC.inc=sum(nonPC.inc), all.prev=sum(all.prev), all.inc=sum(all.inc))]		#
		tmp				<- popart.predicted.incpairs.141015(samples.seq)#
		ipairs.seq.mc	<- copy(tmp$ipairs.seq.mc)#
		ipairs.seq.p	<- copy(tmp$ipairs.seq.p)
ipairs.seq.mc
ipairs.seq.mc[, arm.long:= paste('arm',arm)]#
		ggplot(ipairs.seq.mc, aes(x=100*pE2E, y=100*p.mle, fill=arm.long)) + 				#
				geom_line() + geom_ribbon(aes(ymin=100*p.l95, ymax=100*p.u95, linetype=NA), alpha=0.6) +#
				geom_hline(yintercept=c(10, 40), linetype=2) +#
				scale_x_continuous(breaks=seq(0,100,10), minor_breaks=seq(0,100,2.5)) + scale_y_continuous(breaks=seq(0,100,10), minor_breaks=seq(0,100,2.5)) +#
				scale_fill_brewer(palette='Set1') +#
				theme_bw() + theme(strip.background = element_blank(), strip.text = element_blank()) +#
				labs(x='true proportion of transmissions\nfrom individuals with acute HIV infection\n(%)', y='estimated proportion of transmissions\nfrom individuals with acute HIV infection\n(%)', fill='smallest\ncommunity\nin arm') +#
				facet_grid(.~arm.long)
dir.name
file			<- paste(dir.name,'141015_smallestcommunity.pdf',sep='/')#
		ggsave(file=file, w=8, h=4)#
		ipairs.seq.p[, arm.long:= paste('arm',arm)]#
		ggplot(ipairs.seq.p, aes(x=100*pE2E, y=100*p.mle, fill=arm.long)) + 				#
				geom_line() + geom_ribbon(aes(ymin=100*p.l95, ymax=100*p.u95, linetype=NA), alpha=0.6) +#
				geom_hline(yintercept=c(10, 40), linetype=2) +#
				scale_x_continuous(breaks=seq(0,100,10), minor_breaks=seq(0,100,2.5)) + scale_y_continuous(breaks=seq(0,100,10), minor_breaks=seq(0,100,2.5)) +#
				scale_fill_brewer(palette='Set1') +#
				theme_bw() + theme(strip.background = element_blank(), strip.text = element_blank()) +#
				labs(x='true proportion of transmissions\nfrom individuals with acute HIV infection\n(%)', y='estimated proportion of transmissions\nfrom individuals with acute HIV infection\n(%)', fill='all three\ncommunities\npooled\nin arm') +#
				facet_grid(.~arm.long)
file			<- paste(dir.name,'141015_pooledcommunity.pdf',sep='/')#
		ggsave(file=file, w=8, h=4)
ipairs.seq.p
subset( ipairs.seq.p, pE2E==0.1 )
subset( ipairs.seq.p, pE2E==0.4 )
file
samples.CD4
tmp			<- load(system.file(package="phylodesign", "misc", "popart.141028.ForOlli.RData"))#
	if(verbose) cat(paste("loaded",paste(tmp,collapse=' ')))#
	result		<- as.data.table(result)#
	setnames(result, c("comm.name","allocatedArms"), c("comid_old","arm"))#
	result.CD4	<- as.data.table(result_old)#
	setnames(result.CD4, c("comm.name","allocatedArms"), c("comid_old","arm"))#
	#	total CD4 tests performed (only for protocol)#
	result.CD4[, list(total=sum(CD4total.year2+CD4total.year3+CD4total.year4)), by='arm']#
	#	total first CD4 amongst those on ART#
	#	ignores first phylo testers in year 2#
	result.CD4[, list(total=sum(CD4amongstART_firstvisit.year2+CD4amongstART_firstvisit.year3+CD4amongstART_firstvisit.year4)), by='arm']
result.CD4
tmp			<- subset( result, select=c(comid_old, arm, adultpopsize, cumulincyear1, cumulincyear2, cumulincyear3, prevalence0m, prevalence12m, prevalence24m, prevalence36m) )#
	setkey(tmp, arm)#
	pred.model	<- result[, list( 	arm=arm, #
					all.prev= round(adultpopsize*prevalence36m), #
					all.inc= round(adultpopsize*sum(cumulincyear1, cumulincyear2, cumulincyear3)) ), by="comid_old" ]#
	pred.model[, prediction:= "central"]#
	##
	#	first CD4 samples in year 2 3 4 in HCF#
	#	add CD4first.year2 (these are first timers in HCF) + CD4repeated.year2	(these are repeaters in HCF but first timers in phylo study)#
	##
	tmp			<- subset( result.CD4, select=c(comid_old, arm, CD4first.year2, CD4first.year3, CD4first.year4, CD4incidAmongstFirst.year2, CD4incidAmongstFirst.year3, CD4incidAmongstFirst.year4, CD4repeated.year2))
tmp
subset(tmp, select=c(comid_old, arm, CD4first.year2, CD4repeated.year2))
subset(tmp, select=c(comid_old, arm, CD4first.year1, CD4first.year2, CD4repeated.year2))
subset(result.CD4, select=c(comid_old, arm, CD4first.year1, CD4first.year2, CD4repeated.year2))
indir	<- '/Users/Oliver/duke/2014_Gates/meeting_2014_09_DSPSupdate/CD4-toBlind'	#
	infiles	<- data.table(FILE= list.files(path=indir))
infiles
set(infiles, NULL, 'EPI', infiles[, sapply(strsplit(FILE, '_'),'[[',1)])#
	set(infiles, NULL, 'EPI', infiles[, factor(EPI, levels=c('A','B','C'), labels=c(1,2,3))])#
	set(infiles, NULL, 'TIMEPOINT', infiles[, sapply(strsplit(FILE, '_'),'[[',3)])#
	set(infiles, NULL, 'END', infiles[, sapply(strsplit(FILE, '.', fixed=TRUE),'[[',2)])
infiles
set(infiles, NULL, 'TIMEPOINT', infiles[, substr(TIMEPOINT,1,1)])
infiles
set(infiles, NULL, 'TIMEPOINT_BLINDED', c('B','A','C',  'D','F','E',   'I','H','G','I','H','G'))#
	set(infiles, NULL, 'SAMPLE', c(rep(1,3),  rep(1,3),   rep(1,3),rep(2,3)))
infiles
indir	<- '/Users/Oliver/duke/2014_Gates/meeting_2014_09_DSPSupdate/CD4-toBlind'	#
	infiles	<- data.table(FILE= list.files(path=indir))#
	set(infiles, NULL, 'EPI', infiles[, sapply(strsplit(FILE, '_'),'[[',1)])#
	set(infiles, NULL, 'EPI', infiles[, factor(EPI, levels=c('A','B','C'), labels=c(1,2,3))])#
	set(infiles, NULL, 'TIMEPOINT', infiles[, sapply(strsplit(FILE, '_'),'[[',3)])#
	set(infiles, NULL, 'TIMEPOINT', infiles[, substr(TIMEPOINT,1,1)])#
	set(infiles, NULL, 'END', infiles[, sapply(strsplit(FILE, '.', fixed=TRUE),'[[',2)])#
	tmp		<- unique(subset(infiles, select=c(EPI, TIMEPOINT)))
tmp
set(tmp, NULL, 'TIMEPOINT_BLINDED', c('B','A','C',  'D','F','E',   'I','H','G','I','H','G'))
set(tmp, NULL, 'TIMEPOINT_BLINDED', c('B','A','C',  'D','F','E',   'I','H','G'))
tmp
infiles	<- merge(infiles, tmp, by=c('EPI','TIMEPOINT'))
infiles
set(infiles, NULL, 'SAMPLE', 1)
set(infiles, infiles[, which(EPI==3 & grepl('60', FILE))], 'SAMPLE', 2)
infiles
set(infiles, NULL, 'TO', infiles[, paste('281014','_Village_sc',TIMEPOINT_BLINDED,'_sample',SAMPLE,'_epi',EPI,'.',END,sep='')])
infiles
infiles[, file.rename(paste(indir,'/',FILE,sep=''), paste(indir,'/',TO,sep='')), by='FILE']
z<- load('~/git/HPTN071sim/tmp141026a-r3/TrChains/281014_HPTN071_scA_rep3_SAVE.R')
z
df.trms
subset(df.trms, IDTR==-100)
df.trms[, table(IDCLU)]
subset(df.trms, IDCLU==1)
subset(df.trms, IDCLU==1 & IDTR<0)
subset(df.trms, IDCLU==1 & TIME_TR<=IDTR_TIME_INFECTED)
subset(df.trms, TIME_TR==1975)
subset(df.trms, TIME_TR==1975)[, table(IDCLU)]
